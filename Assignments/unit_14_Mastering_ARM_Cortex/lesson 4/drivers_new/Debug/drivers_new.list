
drivers_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000088c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080009bc  080009bc  000109bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009c4  080009c4  000109cc  2**0
                  CONTENTS
  4 .ARM          00000000  080009c4  080009c4  000109cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009c4  080009cc  000109cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009c4  080009c4  000109c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009c8  080009c8  000109c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  20000000  080009cc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  080009cc  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000109cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000109f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c6d  00000000  00000000  00010a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000035d  00000000  00000000  000116a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000005fc  00000000  00000000  00011a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000120  00000000  00000000  00012000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000000e8  00000000  00000000  00012120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000270a  00000000  00000000  00012208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000017fe  00000000  00000000  00014912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000ad93  00000000  00000000  00016110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000350  00000000  00000000  00020ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080009a4 	.word	0x080009a4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080009a4 	.word	0x080009a4

08000170 <main>:

void wait();
void ledtoggling();

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0
	NVIC_IRQ23_EXTI5_9_ENABLE;
 8000176:	4b1f      	ldr	r3, [pc, #124]	; (80001f4 <main+0x84>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a1e      	ldr	r2, [pc, #120]	; (80001f4 <main+0x84>)
 800017c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000180:	6013      	str	r3, [r2, #0]

	RCC_GPIOA_ENABLE();
 8000182:	4b1d      	ldr	r3, [pc, #116]	; (80001f8 <main+0x88>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a1c      	ldr	r2, [pc, #112]	; (80001f8 <main+0x88>)
 8000188:	f043 0304 	orr.w	r3, r3, #4
 800018c:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_ENABLE();
 800018e:	4b1a      	ldr	r3, [pc, #104]	; (80001f8 <main+0x88>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	4a19      	ldr	r2, [pc, #100]	; (80001f8 <main+0x88>)
 8000194:	f043 0308 	orr.w	r3, r3, #8
 8000198:	6193      	str	r3, [r2, #24]
	RCC_AFIO_ENABLE();
 800019a:	4b17      	ldr	r3, [pc, #92]	; (80001f8 <main+0x88>)
 800019c:	69db      	ldr	r3, [r3, #28]
 800019e:	4a16      	ldr	r2, [pc, #88]	; (80001f8 <main+0x88>)
 80001a0:	f043 0301 	orr.w	r3, r3, #1
 80001a4:	61d3      	str	r3, [r2, #28]

	GPIO_Pin_Config conigPin;

	conigPin.Pin_Mode = General_Purpose_Output_PP;
 80001a6:	2304      	movs	r3, #4
 80001a8:	833b      	strh	r3, [r7, #24]
	conigPin.Pin_Number = GPIO_PIN_13;
 80001aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ae:	837b      	strh	r3, [r7, #26]
	conigPin.Pin_Speed = GPIO_Pin_Max_Speed10M;
 80001b0:	2301      	movs	r3, #1
 80001b2:	773b      	strb	r3, [r7, #28]
	MCAL_GPIO_Init(GPIOB, &conigPin);
 80001b4:	f107 0318 	add.w	r3, r7, #24
 80001b8:	4619      	mov	r1, r3
 80001ba:	4810      	ldr	r0, [pc, #64]	; (80001fc <main+0x8c>)
 80001bc:	f000 fb2a 	bl	8000814 <MCAL_GPIO_Init>

	EXTI_pinConfig_t EXTI_pin;
	EXTI_pin.EXTI_GPIO_pin = EXTI9PB9;
 80001c0:	4a0f      	ldr	r2, [pc, #60]	; (8000200 <main+0x90>)
 80001c2:	f107 0308 	add.w	r3, r7, #8
 80001c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001ca:	e883 0003 	stmia.w	r3, {r0, r1}
	EXTI_pin.trigger_case = EXTI_RISING_Trigger;
 80001ce:	2300      	movs	r3, #0
 80001d0:	743b      	strb	r3, [r7, #16]
	EXTI_pin.P_IRQ_callback = ledtoggling;
 80001d2:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <main+0x94>)
 80001d4:	617b      	str	r3, [r7, #20]
	EXTI_pin.IR_EN = EXTI_IRQ_ENABLE;
 80001d6:	2301      	movs	r3, #1
 80001d8:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_Init(&EXTI_pin);
 80001da:	f107 0308 	add.w	r3, r7, #8
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 f930 	bl	8000444 <MCAL_EXTI_GPIO_Init>

	Switch_To_UnPrivillageMode;
 80001e4:	bf00      	nop
 80001e6:	f3ef 8314 	mrs	r3, CONTROL
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	f383 8814 	msr	CONTROL, r3

	while(1)
 80001f2:	e7fe      	b.n	80001f2 <main+0x82>
 80001f4:	e000e100 	.word	0xe000e100
 80001f8:	40021000 	.word	0x40021000
 80001fc:	40010c00 	.word	0x40010c00
 8000200:	080009bc 	.word	0x080009bc
 8000204:	08000209 	.word	0x08000209

08000208 <ledtoggling>:

	}
}

void ledtoggling()
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	MCAL_GPIO_Toggle_Pin(GPIOB, GPIO_PIN_13);
 800020c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000210:	4806      	ldr	r0, [pc, #24]	; (800022c <ledtoggling+0x24>)
 8000212:	f000 fb92 	bl	800093a <MCAL_GPIO_Toggle_Pin>
	Switch_To_PrivillageMode;
 8000216:	bf00      	nop
 8000218:	f3ef 8314 	mrs	r3, CONTROL
 800021c:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8000220:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000224:	f383 8814 	msr	CONTROL, r3
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}
 800022c:	40010c00 	.word	0x40010c00

08000230 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000230:	480d      	ldr	r0, [pc, #52]	; (8000268 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000232:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000234:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000238:	480c      	ldr	r0, [pc, #48]	; (800026c <LoopForever+0x6>)
  ldr r1, =_edata
 800023a:	490d      	ldr	r1, [pc, #52]	; (8000270 <LoopForever+0xa>)
  ldr r2, =_sidata
 800023c:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <LoopForever+0xe>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000240:	e002      	b.n	8000248 <LoopCopyDataInit>

08000242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000246:	3304      	adds	r3, #4

08000248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800024c:	d3f9      	bcc.n	8000242 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024e:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000250:	4c0a      	ldr	r4, [pc, #40]	; (800027c <LoopForever+0x16>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000254:	e001      	b.n	800025a <LoopFillZerobss>

08000256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000258:	3204      	adds	r2, #4

0800025a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800025c:	d3fb      	bcc.n	8000256 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800025e:	f000 fb7d 	bl	800095c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000262:	f7ff ff85 	bl	8000170 <main>

08000266 <LoopForever>:

LoopForever:
    b LoopForever
 8000266:	e7fe      	b.n	8000266 <LoopForever>
  ldr   r0, =_estack
 8000268:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800026c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000270:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000274:	080009cc 	.word	0x080009cc
  ldr r2, =_sbss
 8000278:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800027c:	20000058 	.word	0x20000058

08000280 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000280:	e7fe      	b.n	8000280 <ADC1_2_IRQHandler>
	...

08000284 <GPIO_Update>:
 *====================================================================
 *						  Generic Functions
 *====================================================================
 */
void GPIO_Update(EXTI_pinConfig_t *EXTI_pin)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	// configure pin as floating input
	GPIO_Pin_Config config_pin;
	config_pin.Pin_Mode = Floating_Input;
 800028c:	2301      	movs	r3, #1
 800028e:	813b      	strh	r3, [r7, #8]
	config_pin.Pin_Number = EXTI_pin->EXTI_GPIO_pin.Pin_number;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	889b      	ldrh	r3, [r3, #4]
 8000294:	817b      	strh	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_pin->EXTI_GPIO_pin.port , &config_pin);
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f107 0208 	add.w	r2, r7, #8
 800029e:	4611      	mov	r1, r2
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 fab7 	bl	8000814 <MCAL_GPIO_Init>
	//===============================================================

	// enable AFIO to rout the EXTI
	uint8_t AFIO_EXTICR_index = EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber / 4;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	799b      	ldrb	r3, [r3, #6]
 80002aa:	089b      	lsrs	r3, r3, #2
 80002ac:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_pos = (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber % 4) *4;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	799b      	ldrb	r3, [r3, #6]
 80002b2:	f003 0303 	and.w	r3, r3, #3
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	009b      	lsls	r3, r3, #2
 80002ba:	73bb      	strb	r3, [r7, #14]
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_pos);
 80002bc:	4a5a      	ldr	r2, [pc, #360]	; (8000428 <GPIO_Update+0x1a4>)
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	3302      	adds	r3, #2
 80002c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c6:	7bbb      	ldrb	r3, [r7, #14]
 80002c8:	210f      	movs	r1, #15
 80002ca:	fa01 f303 	lsl.w	r3, r1, r3
 80002ce:	43db      	mvns	r3, r3
 80002d0:	4618      	mov	r0, r3
 80002d2:	4955      	ldr	r1, [pc, #340]	; (8000428 <GPIO_Update+0x1a4>)
 80002d4:	7bfb      	ldrb	r3, [r7, #15]
 80002d6:	4002      	ands	r2, r0
 80002d8:	3302      	adds	r3, #2
 80002da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_EXTI_GPIO_mapping(EXTI_pin->EXTI_GPIO_pin.port)) << AFIO_EXTICR_pos) ;
 80002de:	4a52      	ldr	r2, [pc, #328]	; (8000428 <GPIO_Update+0x1a4>)
 80002e0:	7bfb      	ldrb	r3, [r7, #15]
 80002e2:	3302      	adds	r3, #2
 80002e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	494f      	ldr	r1, [pc, #316]	; (800042c <GPIO_Update+0x1a8>)
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d016      	beq.n	8000320 <GPIO_Update+0x9c>
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	494e      	ldr	r1, [pc, #312]	; (8000430 <GPIO_Update+0x1ac>)
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d00f      	beq.n	800031c <GPIO_Update+0x98>
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	494c      	ldr	r1, [pc, #304]	; (8000434 <GPIO_Update+0x1b0>)
 8000302:	428b      	cmp	r3, r1
 8000304:	d008      	beq.n	8000318 <GPIO_Update+0x94>
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	494b      	ldr	r1, [pc, #300]	; (8000438 <GPIO_Update+0x1b4>)
 800030c:	428b      	cmp	r3, r1
 800030e:	d101      	bne.n	8000314 <GPIO_Update+0x90>
 8000310:	2303      	movs	r3, #3
 8000312:	e006      	b.n	8000322 <GPIO_Update+0x9e>
 8000314:	2300      	movs	r3, #0
 8000316:	e004      	b.n	8000322 <GPIO_Update+0x9e>
 8000318:	2302      	movs	r3, #2
 800031a:	e002      	b.n	8000322 <GPIO_Update+0x9e>
 800031c:	2301      	movs	r3, #1
 800031e:	e000      	b.n	8000322 <GPIO_Update+0x9e>
 8000320:	2300      	movs	r3, #0
 8000322:	7bb9      	ldrb	r1, [r7, #14]
 8000324:	408b      	lsls	r3, r1
 8000326:	4618      	mov	r0, r3
 8000328:	493f      	ldr	r1, [pc, #252]	; (8000428 <GPIO_Update+0x1a4>)
 800032a:	7bfb      	ldrb	r3, [r7, #15]
 800032c:	4302      	orrs	r2, r0
 800032e:	3302      	adds	r3, #2
 8000330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//================================================================


	//update trigger case Rising or Falling or both
	EXTI->RTSR &= ~(1 << (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber));
 8000334:	4b41      	ldr	r3, [pc, #260]	; (800043c <GPIO_Update+0x1b8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	7992      	ldrb	r2, [r2, #6]
 800033c:	4611      	mov	r1, r2
 800033e:	2201      	movs	r2, #1
 8000340:	408a      	lsls	r2, r1
 8000342:	43d2      	mvns	r2, r2
 8000344:	4611      	mov	r1, r2
 8000346:	4a3d      	ldr	r2, [pc, #244]	; (800043c <GPIO_Update+0x1b8>)
 8000348:	400b      	ands	r3, r1
 800034a:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber));
 800034c:	4b3b      	ldr	r3, [pc, #236]	; (800043c <GPIO_Update+0x1b8>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	7992      	ldrb	r2, [r2, #6]
 8000354:	4611      	mov	r1, r2
 8000356:	2201      	movs	r2, #1
 8000358:	408a      	lsls	r2, r1
 800035a:	43d2      	mvns	r2, r2
 800035c:	4611      	mov	r1, r2
 800035e:	4a37      	ldr	r2, [pc, #220]	; (800043c <GPIO_Update+0x1b8>)
 8000360:	400b      	ands	r3, r1
 8000362:	60d3      	str	r3, [r2, #12]

	if (EXTI_pin->trigger_case == EXTI_RISING_Trigger)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	7a1b      	ldrb	r3, [r3, #8]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d10b      	bne.n	8000384 <GPIO_Update+0x100>
	{
		EXTI->RTSR |= (1 << (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber));
 800036c:	4b33      	ldr	r3, [pc, #204]	; (800043c <GPIO_Update+0x1b8>)
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	7992      	ldrb	r2, [r2, #6]
 8000374:	4611      	mov	r1, r2
 8000376:	2201      	movs	r2, #1
 8000378:	408a      	lsls	r2, r1
 800037a:	4611      	mov	r1, r2
 800037c:	4a2f      	ldr	r2, [pc, #188]	; (800043c <GPIO_Update+0x1b8>)
 800037e:	430b      	orrs	r3, r1
 8000380:	6093      	str	r3, [r2, #8]
 8000382:	e029      	b.n	80003d8 <GPIO_Update+0x154>
	}
	else if(EXTI_pin->trigger_case == EXTI_FALLING_Trigger)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	7a1b      	ldrb	r3, [r3, #8]
 8000388:	2b01      	cmp	r3, #1
 800038a:	d10b      	bne.n	80003a4 <GPIO_Update+0x120>
	{
		EXTI->FTSR |= (1 << (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber));
 800038c:	4b2b      	ldr	r3, [pc, #172]	; (800043c <GPIO_Update+0x1b8>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	7992      	ldrb	r2, [r2, #6]
 8000394:	4611      	mov	r1, r2
 8000396:	2201      	movs	r2, #1
 8000398:	408a      	lsls	r2, r1
 800039a:	4611      	mov	r1, r2
 800039c:	4a27      	ldr	r2, [pc, #156]	; (800043c <GPIO_Update+0x1b8>)
 800039e:	430b      	orrs	r3, r1
 80003a0:	60d3      	str	r3, [r2, #12]
 80003a2:	e019      	b.n	80003d8 <GPIO_Update+0x154>
	}
	else if(EXTI_pin->trigger_case == EXTI_RisingAndFalling_trigger)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	7a1b      	ldrb	r3, [r3, #8]
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	d115      	bne.n	80003d8 <GPIO_Update+0x154>
	{
		EXTI->RTSR |= (1 << (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber));
 80003ac:	4b23      	ldr	r3, [pc, #140]	; (800043c <GPIO_Update+0x1b8>)
 80003ae:	689b      	ldr	r3, [r3, #8]
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	7992      	ldrb	r2, [r2, #6]
 80003b4:	4611      	mov	r1, r2
 80003b6:	2201      	movs	r2, #1
 80003b8:	408a      	lsls	r2, r1
 80003ba:	4611      	mov	r1, r2
 80003bc:	4a1f      	ldr	r2, [pc, #124]	; (800043c <GPIO_Update+0x1b8>)
 80003be:	430b      	orrs	r3, r1
 80003c0:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber));
 80003c2:	4b1e      	ldr	r3, [pc, #120]	; (800043c <GPIO_Update+0x1b8>)
 80003c4:	68db      	ldr	r3, [r3, #12]
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	7992      	ldrb	r2, [r2, #6]
 80003ca:	4611      	mov	r1, r2
 80003cc:	2201      	movs	r2, #1
 80003ce:	408a      	lsls	r2, r1
 80003d0:	4611      	mov	r1, r2
 80003d2:	4a1a      	ldr	r2, [pc, #104]	; (800043c <GPIO_Update+0x1b8>)
 80003d4:	430b      	orrs	r3, r1
 80003d6:	60d3      	str	r3, [r2, #12]
	}
	//==================================================================

	// update the IRQ call_back function
	GP_IRQ_Callback_FUNS[EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber] = EXTI_pin->P_IRQ_callback;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	799b      	ldrb	r3, [r3, #6]
 80003dc:	4619      	mov	r1, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	4a17      	ldr	r2, [pc, #92]	; (8000440 <GPIO_Update+0x1bc>)
 80003e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//==================================================================

	// enable/disable EXTI
	if(EXTI_pin->IR_EN == EXTI_IRQ_ENABLE)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	7a5b      	ldrb	r3, [r3, #9]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d10b      	bne.n	8000408 <GPIO_Update+0x184>
	{
		EXTI->IMR |= (1 << (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber));
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <GPIO_Update+0x1b8>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	7992      	ldrb	r2, [r2, #6]
 80003f8:	4611      	mov	r1, r2
 80003fa:	2201      	movs	r2, #1
 80003fc:	408a      	lsls	r2, r1
 80003fe:	4611      	mov	r1, r2
 8000400:	4a0e      	ldr	r2, [pc, #56]	; (800043c <GPIO_Update+0x1b8>)
 8000402:	430b      	orrs	r3, r1
 8000404:	6013      	str	r3, [r2, #0]
	}else
	{
		EXTI->IMR &= ~(1 << (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber));
	}

}
 8000406:	e00b      	b.n	8000420 <GPIO_Update+0x19c>
		EXTI->IMR &= ~(1 << (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber));
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <GPIO_Update+0x1b8>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	7992      	ldrb	r2, [r2, #6]
 8000410:	4611      	mov	r1, r2
 8000412:	2201      	movs	r2, #1
 8000414:	408a      	lsls	r2, r1
 8000416:	43d2      	mvns	r2, r2
 8000418:	4611      	mov	r1, r2
 800041a:	4a08      	ldr	r2, [pc, #32]	; (800043c <GPIO_Update+0x1b8>)
 800041c:	400b      	ands	r3, r1
 800041e:	6013      	str	r3, [r2, #0]
}
 8000420:	bf00      	nop
 8000422:	3710      	adds	r7, #16
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40010000 	.word	0x40010000
 800042c:	40010800 	.word	0x40010800
 8000430:	40010c00 	.word	0x40010c00
 8000434:	40011000 	.word	0x40011000
 8000438:	40011400 	.word	0x40011400
 800043c:	40010400 	.word	0x40010400
 8000440:	2000001c 	.word	0x2000001c

08000444 <MCAL_EXTI_GPIO_Init>:
 *					APIs Functions Declaration
 *====================================================================
 */

void MCAL_EXTI_GPIO_Init(EXTI_pinConfig_t *EXTI_pin)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	GPIO_Update(EXTI_pin);
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f7ff ff19 	bl	8000284 <GPIO_Update>
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <EXTI0_IRQHandler>:
	NVIC_IRQ23_EXTI5_9_DISABLE;
	NVIC_IRQ40_EXTI10_15_DISABLE;
}

void EXTI0_IRQHandler(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	//clear IRQ by writing 1 into pending registers EXTI_PR
	EXTI->PR |= (1 << 0);
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <EXTI0_IRQHandler+0x1c>)
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <EXTI0_IRQHandler+0x1c>)
 8000466:	f043 0301 	orr.w	r3, r3, #1
 800046a:	6153      	str	r3, [r2, #20]
	// call the IRQ callback function
	GP_IRQ_Callback_FUNS[0]();
 800046c:	4b03      	ldr	r3, [pc, #12]	; (800047c <EXTI0_IRQHandler+0x20>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4798      	blx	r3

}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40010400 	.word	0x40010400
 800047c:	2000001c 	.word	0x2000001c

08000480 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	//clear IRQ by writing 1 into pending registers EXTI_PR
	EXTI->PR |= (1 << 1);
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <EXTI1_IRQHandler+0x1c>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	4a04      	ldr	r2, [pc, #16]	; (800049c <EXTI1_IRQHandler+0x1c>)
 800048a:	f043 0302 	orr.w	r3, r3, #2
 800048e:	6153      	str	r3, [r2, #20]
	// call the IRQ callback function
	GP_IRQ_Callback_FUNS[1]();
 8000490:	4b03      	ldr	r3, [pc, #12]	; (80004a0 <EXTI1_IRQHandler+0x20>)
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	4798      	blx	r3
}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40010400 	.word	0x40010400
 80004a0:	2000001c 	.word	0x2000001c

080004a4 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	//clear IRQ by writing 1 into pending registers EXTI_PR
	EXTI->PR |= (1 << 2);
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <EXTI2_IRQHandler+0x1c>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <EXTI2_IRQHandler+0x1c>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6153      	str	r3, [r2, #20]
	// call the IRQ callback function
	GP_IRQ_Callback_FUNS[2]();
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <EXTI2_IRQHandler+0x20>)
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	4798      	blx	r3
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40010400 	.word	0x40010400
 80004c4:	2000001c 	.word	0x2000001c

080004c8 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	//clear IRQ by writing 1 into pending registers EXTI_PR
	EXTI->PR |= (1 << 3);
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <EXTI3_IRQHandler+0x1c>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <EXTI3_IRQHandler+0x1c>)
 80004d2:	f043 0308 	orr.w	r3, r3, #8
 80004d6:	6153      	str	r3, [r2, #20]
	// call the IRQ callback function
	GP_IRQ_Callback_FUNS[3]();
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <EXTI3_IRQHandler+0x20>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	4798      	blx	r3
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40010400 	.word	0x40010400
 80004e8:	2000001c 	.word	0x2000001c

080004ec <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	//clear IRQ by writing 1 into pending registers EXTI_PR
	EXTI->PR |= (1 << 4);
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <EXTI4_IRQHandler+0x1c>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <EXTI4_IRQHandler+0x1c>)
 80004f6:	f043 0310 	orr.w	r3, r3, #16
 80004fa:	6153      	str	r3, [r2, #20]
	// call the IRQ callback function
	GP_IRQ_Callback_FUNS[4]();
 80004fc:	4b03      	ldr	r3, [pc, #12]	; (800050c <EXTI4_IRQHandler+0x20>)
 80004fe:	691b      	ldr	r3, [r3, #16]
 8000500:	4798      	blx	r3
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40010400 	.word	0x40010400
 800050c:	2000001c 	.word	0x2000001c

08000510 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 5) 		{EXTI->PR |= 1 << 5;   GP_IRQ_Callback_FUNS[5]();}
 8000514:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <EXTI9_5_IRQHandler+0xa0>)
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	f003 0320 	and.w	r3, r3, #32
 800051c:	2b00      	cmp	r3, #0
 800051e:	d008      	beq.n	8000532 <EXTI9_5_IRQHandler+0x22>
 8000520:	4b23      	ldr	r3, [pc, #140]	; (80005b0 <EXTI9_5_IRQHandler+0xa0>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	4a22      	ldr	r2, [pc, #136]	; (80005b0 <EXTI9_5_IRQHandler+0xa0>)
 8000526:	f043 0320 	orr.w	r3, r3, #32
 800052a:	6153      	str	r3, [r2, #20]
 800052c:	4b21      	ldr	r3, [pc, #132]	; (80005b4 <EXTI9_5_IRQHandler+0xa4>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	4798      	blx	r3
	if(EXTI->PR & 1 << 6) 		{EXTI->PR |= 1 << 6;   GP_IRQ_Callback_FUNS[6]();}
 8000532:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <EXTI9_5_IRQHandler+0xa0>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800053a:	2b00      	cmp	r3, #0
 800053c:	d008      	beq.n	8000550 <EXTI9_5_IRQHandler+0x40>
 800053e:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <EXTI9_5_IRQHandler+0xa0>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a1b      	ldr	r2, [pc, #108]	; (80005b0 <EXTI9_5_IRQHandler+0xa0>)
 8000544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000548:	6153      	str	r3, [r2, #20]
 800054a:	4b1a      	ldr	r3, [pc, #104]	; (80005b4 <EXTI9_5_IRQHandler+0xa4>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4798      	blx	r3
	if(EXTI->PR & 1 << 7) 		{EXTI->PR |= 1 << 7;   GP_IRQ_Callback_FUNS[7]();}
 8000550:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <EXTI9_5_IRQHandler+0xa0>)
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000558:	2b00      	cmp	r3, #0
 800055a:	d008      	beq.n	800056e <EXTI9_5_IRQHandler+0x5e>
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <EXTI9_5_IRQHandler+0xa0>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	4a13      	ldr	r2, [pc, #76]	; (80005b0 <EXTI9_5_IRQHandler+0xa0>)
 8000562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000566:	6153      	str	r3, [r2, #20]
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <EXTI9_5_IRQHandler+0xa4>)
 800056a:	69db      	ldr	r3, [r3, #28]
 800056c:	4798      	blx	r3
	if(EXTI->PR & 1 << 8) 		{EXTI->PR |= 1 << 8;   GP_IRQ_Callback_FUNS[8]();}
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <EXTI9_5_IRQHandler+0xa0>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000576:	2b00      	cmp	r3, #0
 8000578:	d008      	beq.n	800058c <EXTI9_5_IRQHandler+0x7c>
 800057a:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <EXTI9_5_IRQHandler+0xa0>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <EXTI9_5_IRQHandler+0xa0>)
 8000580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000584:	6153      	str	r3, [r2, #20]
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <EXTI9_5_IRQHandler+0xa4>)
 8000588:	6a1b      	ldr	r3, [r3, #32]
 800058a:	4798      	blx	r3
	if(EXTI->PR & 1 << 9) 		{EXTI->PR |= 1 << 9;   GP_IRQ_Callback_FUNS[9]();}
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <EXTI9_5_IRQHandler+0xa0>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000594:	2b00      	cmp	r3, #0
 8000596:	d008      	beq.n	80005aa <EXTI9_5_IRQHandler+0x9a>
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <EXTI9_5_IRQHandler+0xa0>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <EXTI9_5_IRQHandler+0xa0>)
 800059e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005a2:	6153      	str	r3, [r2, #20]
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <EXTI9_5_IRQHandler+0xa4>)
 80005a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a8:	4798      	blx	r3
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40010400 	.word	0x40010400
 80005b4:	2000001c 	.word	0x2000001c

080005b8 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 10) 		{EXTI->PR |= 1 << 10;   GP_IRQ_Callback_FUNS[10]();}
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <EXTI15_10_IRQHandler+0xbc>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d008      	beq.n	80005da <EXTI15_10_IRQHandler+0x22>
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <EXTI15_10_IRQHandler+0xbc>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4a29      	ldr	r2, [pc, #164]	; (8000674 <EXTI15_10_IRQHandler+0xbc>)
 80005ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005d2:	6153      	str	r3, [r2, #20]
 80005d4:	4b28      	ldr	r3, [pc, #160]	; (8000678 <EXTI15_10_IRQHandler+0xc0>)
 80005d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005d8:	4798      	blx	r3
	if(EXTI->PR & 1 << 11) 		{EXTI->PR |= 1 << 11;   GP_IRQ_Callback_FUNS[11]();}
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <EXTI15_10_IRQHandler+0xbc>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d008      	beq.n	80005f8 <EXTI15_10_IRQHandler+0x40>
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <EXTI15_10_IRQHandler+0xbc>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a22      	ldr	r2, [pc, #136]	; (8000674 <EXTI15_10_IRQHandler+0xbc>)
 80005ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b21      	ldr	r3, [pc, #132]	; (8000678 <EXTI15_10_IRQHandler+0xc0>)
 80005f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005f6:	4798      	blx	r3
	if(EXTI->PR & 1 << 12) 		{EXTI->PR |= 1 << 12;   GP_IRQ_Callback_FUNS[12]();}
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <EXTI15_10_IRQHandler+0xbc>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000600:	2b00      	cmp	r3, #0
 8000602:	d008      	beq.n	8000616 <EXTI15_10_IRQHandler+0x5e>
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <EXTI15_10_IRQHandler+0xbc>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a1a      	ldr	r2, [pc, #104]	; (8000674 <EXTI15_10_IRQHandler+0xbc>)
 800060a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b19      	ldr	r3, [pc, #100]	; (8000678 <EXTI15_10_IRQHandler+0xc0>)
 8000612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000614:	4798      	blx	r3
	if(EXTI->PR & 1 << 13) 		{EXTI->PR |= 1 << 13;   GP_IRQ_Callback_FUNS[13]();}
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <EXTI15_10_IRQHandler+0xbc>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d008      	beq.n	8000634 <EXTI15_10_IRQHandler+0x7c>
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <EXTI15_10_IRQHandler+0xbc>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <EXTI15_10_IRQHandler+0xbc>)
 8000628:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <EXTI15_10_IRQHandler+0xc0>)
 8000630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000632:	4798      	blx	r3
	if(EXTI->PR & 1 << 14) 		{EXTI->PR |= 1 << 14;   GP_IRQ_Callback_FUNS[14]();}
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <EXTI15_10_IRQHandler+0xbc>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800063c:	2b00      	cmp	r3, #0
 800063e:	d008      	beq.n	8000652 <EXTI15_10_IRQHandler+0x9a>
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <EXTI15_10_IRQHandler+0xbc>)
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <EXTI15_10_IRQHandler+0xbc>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064a:	6153      	str	r3, [r2, #20]
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <EXTI15_10_IRQHandler+0xc0>)
 800064e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000650:	4798      	blx	r3
	if(EXTI->PR & 1 << 15) 		{EXTI->PR |= 1 << 15;   GP_IRQ_Callback_FUNS[15]();}
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <EXTI15_10_IRQHandler+0xbc>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800065a:	2b00      	cmp	r3, #0
 800065c:	d008      	beq.n	8000670 <EXTI15_10_IRQHandler+0xb8>
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <EXTI15_10_IRQHandler+0xbc>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a04      	ldr	r2, [pc, #16]	; (8000674 <EXTI15_10_IRQHandler+0xbc>)
 8000664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000668:	6153      	str	r3, [r2, #20]
 800066a:	4b03      	ldr	r3, [pc, #12]	; (8000678 <EXTI15_10_IRQHandler+0xc0>)
 800066c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800066e:	4798      	blx	r3
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40010400 	.word	0x40010400
 8000678:	2000001c 	.word	0x2000001c

0800067c <Get_CRLH_loc>:

#include "stm32f103x6_gpio_driver.h"
#include "stm32f103x6.h"

uint8_t Get_CRLH_loc(int pin_number)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	switch(pin_number)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800068a:	f000 80bb 	beq.w	8000804 <Get_CRLH_loc+0x188>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000694:	f300 80b8 	bgt.w	8000808 <Get_CRLH_loc+0x18c>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800069e:	f000 80af 	beq.w	8000800 <Get_CRLH_loc+0x184>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80006a8:	f300 80ae 	bgt.w	8000808 <Get_CRLH_loc+0x18c>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006b2:	f000 80a3 	beq.w	80007fc <Get_CRLH_loc+0x180>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006bc:	f300 80a4 	bgt.w	8000808 <Get_CRLH_loc+0x18c>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006c6:	f000 8097 	beq.w	80007f8 <Get_CRLH_loc+0x17c>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006d0:	f300 809a 	bgt.w	8000808 <Get_CRLH_loc+0x18c>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006da:	f000 808b 	beq.w	80007f4 <Get_CRLH_loc+0x178>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006e4:	f300 8090 	bgt.w	8000808 <Get_CRLH_loc+0x18c>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006ee:	d07f      	beq.n	80007f0 <Get_CRLH_loc+0x174>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006f6:	f300 8087 	bgt.w	8000808 <Get_CRLH_loc+0x18c>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000700:	d074      	beq.n	80007ec <Get_CRLH_loc+0x170>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000708:	dc7e      	bgt.n	8000808 <Get_CRLH_loc+0x18c>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000710:	d06a      	beq.n	80007e8 <Get_CRLH_loc+0x16c>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000718:	dc76      	bgt.n	8000808 <Get_CRLH_loc+0x18c>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b80      	cmp	r3, #128	; 0x80
 800071e:	d061      	beq.n	80007e4 <Get_CRLH_loc+0x168>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b80      	cmp	r3, #128	; 0x80
 8000724:	dc70      	bgt.n	8000808 <Get_CRLH_loc+0x18c>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2b20      	cmp	r3, #32
 800072a:	dc49      	bgt.n	80007c0 <Get_CRLH_loc+0x144>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	dd6a      	ble.n	8000808 <Get_CRLH_loc+0x18c>
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	3b01      	subs	r3, #1
 8000736:	2b1f      	cmp	r3, #31
 8000738:	d866      	bhi.n	8000808 <Get_CRLH_loc+0x18c>
 800073a:	a201      	add	r2, pc, #4	; (adr r2, 8000740 <Get_CRLH_loc+0xc4>)
 800073c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000740:	080007c9 	.word	0x080007c9
 8000744:	080007cd 	.word	0x080007cd
 8000748:	08000809 	.word	0x08000809
 800074c:	080007d1 	.word	0x080007d1
 8000750:	08000809 	.word	0x08000809
 8000754:	08000809 	.word	0x08000809
 8000758:	08000809 	.word	0x08000809
 800075c:	080007d5 	.word	0x080007d5
 8000760:	08000809 	.word	0x08000809
 8000764:	08000809 	.word	0x08000809
 8000768:	08000809 	.word	0x08000809
 800076c:	08000809 	.word	0x08000809
 8000770:	08000809 	.word	0x08000809
 8000774:	08000809 	.word	0x08000809
 8000778:	08000809 	.word	0x08000809
 800077c:	080007d9 	.word	0x080007d9
 8000780:	08000809 	.word	0x08000809
 8000784:	08000809 	.word	0x08000809
 8000788:	08000809 	.word	0x08000809
 800078c:	08000809 	.word	0x08000809
 8000790:	08000809 	.word	0x08000809
 8000794:	08000809 	.word	0x08000809
 8000798:	08000809 	.word	0x08000809
 800079c:	08000809 	.word	0x08000809
 80007a0:	08000809 	.word	0x08000809
 80007a4:	08000809 	.word	0x08000809
 80007a8:	08000809 	.word	0x08000809
 80007ac:	08000809 	.word	0x08000809
 80007b0:	08000809 	.word	0x08000809
 80007b4:	08000809 	.word	0x08000809
 80007b8:	08000809 	.word	0x08000809
 80007bc:	080007dd 	.word	0x080007dd
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b40      	cmp	r3, #64	; 0x40
 80007c4:	d00c      	beq.n	80007e0 <Get_CRLH_loc+0x164>
 80007c6:	e01f      	b.n	8000808 <Get_CRLH_loc+0x18c>
	{
	case GPIO_PIN_0 :
		return 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	e01e      	b.n	800080a <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_1 :
		return 4;
 80007cc:	2304      	movs	r3, #4
 80007ce:	e01c      	b.n	800080a <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_2 :
		return 8;
 80007d0:	2308      	movs	r3, #8
 80007d2:	e01a      	b.n	800080a <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_3 :
		return 12;
 80007d4:	230c      	movs	r3, #12
 80007d6:	e018      	b.n	800080a <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_4 :
		return 16;
 80007d8:	2310      	movs	r3, #16
 80007da:	e016      	b.n	800080a <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_5 :
		return 20;
 80007dc:	2314      	movs	r3, #20
 80007de:	e014      	b.n	800080a <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_6 :
		return 24;
 80007e0:	2318      	movs	r3, #24
 80007e2:	e012      	b.n	800080a <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_7 :
		return 28;
 80007e4:	231c      	movs	r3, #28
 80007e6:	e010      	b.n	800080a <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_8 :
		return 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	e00e      	b.n	800080a <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_9 :
		return 4;
 80007ec:	2304      	movs	r3, #4
 80007ee:	e00c      	b.n	800080a <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_10 :
		return 8;
 80007f0:	2308      	movs	r3, #8
 80007f2:	e00a      	b.n	800080a <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_11 :
		return 12;
 80007f4:	230c      	movs	r3, #12
 80007f6:	e008      	b.n	800080a <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_12 :
		return 16;
 80007f8:	2310      	movs	r3, #16
 80007fa:	e006      	b.n	800080a <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_13 :
		return 20;
 80007fc:	2314      	movs	r3, #20
 80007fe:	e004      	b.n	800080a <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_14 :
		return 24;
 8000800:	2318      	movs	r3, #24
 8000802:	e002      	b.n	800080a <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_15 :
		return 28;
 8000804:	231c      	movs	r3, #28
 8000806:	e000      	b.n	800080a <Get_CRLH_loc+0x18e>
		break;
	}

	return 0;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <MCAL_GPIO_Init>:




void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_Pin_Config *pinconfig  )
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
	// check on pin if at CRL or CRH --------
	volatile uint32_t *config_register = NULL;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_config;
	config_register = (pinconfig->Pin_Number > GPIO_PIN_7) ?   &GPIOx->CRH : &GPIOx->CRL;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	885b      	ldrh	r3, [r3, #2]
 8000826:	2b80      	cmp	r3, #128	; 0x80
 8000828:	d902      	bls.n	8000830 <MCAL_GPIO_Init+0x1c>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3304      	adds	r3, #4
 800082e:	e000      	b.n	8000832 <MCAL_GPIO_Init+0x1e>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	60bb      	str	r3, [r7, #8]


	(*config_register) &= ~(0xF<<Get_CRLH_loc(pinconfig->Pin_Number)); //reset the specific bits to write on them
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	885b      	ldrh	r3, [r3, #2]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff1f 	bl	800067c <Get_CRLH_loc>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	230f      	movs	r3, #15
 8000844:	4093      	lsls	r3, r2
 8000846:	43da      	mvns	r2, r3
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	401a      	ands	r2, r3
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	601a      	str	r2, [r3, #0]
	// input pin
	if (pinconfig->Pin_Mode == Analog_Mode || pinconfig->Pin_Mode == Floating_Input || pinconfig->Pin_Mode == Input_Pull_Up || pinconfig->Pin_Mode == Input_Pull_Down)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00b      	beq.n	8000872 <MCAL_GPIO_Init+0x5e>
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d007      	beq.n	8000872 <MCAL_GPIO_Init+0x5e>
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	2b02      	cmp	r3, #2
 8000868:	d003      	beq.n	8000872 <MCAL_GPIO_Init+0x5e>
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	2b03      	cmp	r3, #3
 8000870:	d145      	bne.n	80008fe <MCAL_GPIO_Init+0xea>
	{
		PIN_config = 0;  // input pin
 8000872:	2300      	movs	r3, #0
 8000874:	73fb      	strb	r3, [r7, #15]
		if (pinconfig->Pin_Mode == Input_Pull_Up)
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d110      	bne.n	80008a0 <MCAL_GPIO_Init+0x8c>
		{
			PIN_config |= (pinconfig->Pin_Mode<<2);
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	b25a      	sxtb	r2, r3
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4313      	orrs	r3, r2
 800088c:	b25b      	sxtb	r3, r3
 800088e:	73fb      	strb	r3, [r7, #15]
			GPIOx->ODR |= pinconfig->Pin_Number;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	683a      	ldr	r2, [r7, #0]
 8000896:	8852      	ldrh	r2, [r2, #2]
 8000898:	431a      	orrs	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	e01f      	b.n	80008e0 <MCAL_GPIO_Init+0xcc>
		}
		else if( pinconfig->Pin_Mode == Input_Pull_Down)
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d112      	bne.n	80008ce <MCAL_GPIO_Init+0xba>
		{
			PIN_config |= ((pinconfig->Pin_Mode-1)<<2);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	3b01      	subs	r3, #1
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	b25a      	sxtb	r2, r3
 80008b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	73fb      	strb	r3, [r7, #15]
			GPIOx->ODR &= (~pinconfig->Pin_Number);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	683a      	ldr	r2, [r7, #0]
 80008c2:	8852      	ldrh	r2, [r2, #2]
 80008c4:	43d2      	mvns	r2, r2
 80008c6:	401a      	ands	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	e008      	b.n	80008e0 <MCAL_GPIO_Init+0xcc>
		}
		else
		{
			PIN_config |= (pinconfig->Pin_Mode<<2);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	b25a      	sxtb	r2, r3
 80008d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008da:	4313      	orrs	r3, r2
 80008dc:	b25b      	sxtb	r3, r3
 80008de:	73fb      	strb	r3, [r7, #15]
		}

		(*config_register) |= (PIN_config << Get_CRLH_loc(pinconfig->Pin_Number));
 80008e0:	7bfc      	ldrb	r4, [r7, #15]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	885b      	ldrh	r3, [r3, #2]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fec8 	bl	800067c <Get_CRLH_loc>
 80008ec:	4603      	mov	r3, r0
 80008ee:	fa04 f203 	lsl.w	r2, r4, r3
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	431a      	orrs	r2, r3
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	e019      	b.n	8000932 <MCAL_GPIO_Init+0x11e>
	}
	else // output pin
	{
		PIN_config = (((pinconfig->Pin_Mode)-0x4)<<2) | ((pinconfig->Pin_Speed)<<0);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	3b04      	subs	r3, #4
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	b25a      	sxtb	r2, r3
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	791b      	ldrb	r3, [r3, #4]
 800090c:	b25b      	sxtb	r3, r3
 800090e:	4313      	orrs	r3, r2
 8000910:	b25b      	sxtb	r3, r3
 8000912:	73fb      	strb	r3, [r7, #15]
		(*config_register) |= (PIN_config << Get_CRLH_loc(pinconfig->Pin_Number));
 8000914:	7bfc      	ldrb	r4, [r7, #15]
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	885b      	ldrh	r3, [r3, #2]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff feae 	bl	800067c <Get_CRLH_loc>
 8000920:	4603      	mov	r3, r0
 8000922:	fa04 f203 	lsl.w	r2, r4, r3
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	431a      	orrs	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	601a      	str	r2, [r3, #0]

	}
}
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	bd90      	pop	{r4, r7, pc}

0800093a <MCAL_GPIO_Toggle_Pin>:
void MCAL_GPIO_Write_Port(GPIO_TypeDef * GPIOx  , uint16_t value)
{
	GPIOx->ODR = (uint32_t)value ;
}
void MCAL_GPIO_Toggle_Pin(GPIO_TypeDef * GPIOx ,  uint16_t pinnumber)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	460b      	mov	r3, r1
 8000944:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= pinnumber;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	68da      	ldr	r2, [r3, #12]
 800094a:	887b      	ldrh	r3, [r7, #2]
 800094c:	405a      	eors	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	60da      	str	r2, [r3, #12]
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <__libc_init_array>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	2600      	movs	r6, #0
 8000960:	4d0c      	ldr	r5, [pc, #48]	; (8000994 <__libc_init_array+0x38>)
 8000962:	4c0d      	ldr	r4, [pc, #52]	; (8000998 <__libc_init_array+0x3c>)
 8000964:	1b64      	subs	r4, r4, r5
 8000966:	10a4      	asrs	r4, r4, #2
 8000968:	42a6      	cmp	r6, r4
 800096a:	d109      	bne.n	8000980 <__libc_init_array+0x24>
 800096c:	f000 f81a 	bl	80009a4 <_init>
 8000970:	2600      	movs	r6, #0
 8000972:	4d0a      	ldr	r5, [pc, #40]	; (800099c <__libc_init_array+0x40>)
 8000974:	4c0a      	ldr	r4, [pc, #40]	; (80009a0 <__libc_init_array+0x44>)
 8000976:	1b64      	subs	r4, r4, r5
 8000978:	10a4      	asrs	r4, r4, #2
 800097a:	42a6      	cmp	r6, r4
 800097c:	d105      	bne.n	800098a <__libc_init_array+0x2e>
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f855 3b04 	ldr.w	r3, [r5], #4
 8000984:	4798      	blx	r3
 8000986:	3601      	adds	r6, #1
 8000988:	e7ee      	b.n	8000968 <__libc_init_array+0xc>
 800098a:	f855 3b04 	ldr.w	r3, [r5], #4
 800098e:	4798      	blx	r3
 8000990:	3601      	adds	r6, #1
 8000992:	e7f2      	b.n	800097a <__libc_init_array+0x1e>
 8000994:	080009c4 	.word	0x080009c4
 8000998:	080009c4 	.word	0x080009c4
 800099c:	080009c4 	.word	0x080009c4
 80009a0:	080009c8 	.word	0x080009c8

080009a4 <_init>:
 80009a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a6:	bf00      	nop
 80009a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009aa:	bc08      	pop	{r3}
 80009ac:	469e      	mov	lr, r3
 80009ae:	4770      	bx	lr

080009b0 <_fini>:
 80009b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b2:	bf00      	nop
 80009b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009b6:	bc08      	pop	{r3}
 80009b8:	469e      	mov	lr, r3
 80009ba:	4770      	bx	lr
