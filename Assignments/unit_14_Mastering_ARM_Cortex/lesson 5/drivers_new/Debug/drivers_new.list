
drivers_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009b4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000ae4  08000ae4  00010ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000aec  08000aec  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000aec  08000aec  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000aec  08000aec  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000aec  08000aec  00010aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000af0  08000af0  00010af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000004  08000af8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000af8  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000da0  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003e8  00000000  00000000  00020e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000724  00000000  00000000  000211f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000140  00000000  00000000  00021920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000108  00000000  00000000  00021a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000272e  00000000  00000000  00021b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000189e  00000000  00000000  00024296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000af3b  00000000  00000000  00025b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000003dc  00000000  00000000  00030a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000acc 	.word	0x08000acc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000acc 	.word	0x08000acc

08000170 <taskA>:

void wait();
void ledtoggling();

int taskA(int a, int b)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	return a + b;
 800017a:	687a      	ldr	r2, [r7, #4]
 800017c:	683b      	ldr	r3, [r7, #0]
 800017e:	4413      	add	r3, r2
}
 8000180:	4618      	mov	r0, r3
 8000182:	370c      	adds	r7, #12
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr

0800018a <taskB>:

int taskB(int a, int b)
{
 800018a:	b480      	push	{r7}
 800018c:	b083      	sub	sp, #12
 800018e:	af00      	add	r7, sp, #0
 8000190:	6078      	str	r0, [r7, #4]
 8000192:	6039      	str	r1, [r7, #0]
	return a - b;
 8000194:	687a      	ldr	r2, [r7, #4]
 8000196:	683b      	ldr	r3, [r7, #0]
 8000198:	1ad3      	subs	r3, r2, r3
}
 800019a:	4618      	mov	r0, r3
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr

080001a4 <SVC_Handler>:

void OS_start();


void SVC_Handler()
{
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
	Switch_To_PrivillageMode;
 80001a8:	bf00      	nop
 80001aa:	f3ef 8314 	mrs	r3, CONTROL
 80001ae:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80001b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80001b6:	f383 8814 	msr	CONTROL, r3
}
 80001ba:	bf00      	nop
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
	...

080001c4 <main>:

int main(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b088      	sub	sp, #32
 80001c8:	af00      	add	r7, sp, #0

	NVIC_IRQ23_EXTI5_9_ENABLE;
 80001ca:	4b1d      	ldr	r3, [pc, #116]	; (8000240 <main+0x7c>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4a1c      	ldr	r2, [pc, #112]	; (8000240 <main+0x7c>)
 80001d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80001d4:	6013      	str	r3, [r2, #0]

	RCC_GPIOA_ENABLE();
 80001d6:	4b1b      	ldr	r3, [pc, #108]	; (8000244 <main+0x80>)
 80001d8:	699b      	ldr	r3, [r3, #24]
 80001da:	4a1a      	ldr	r2, [pc, #104]	; (8000244 <main+0x80>)
 80001dc:	f043 0304 	orr.w	r3, r3, #4
 80001e0:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_ENABLE();
 80001e2:	4b18      	ldr	r3, [pc, #96]	; (8000244 <main+0x80>)
 80001e4:	699b      	ldr	r3, [r3, #24]
 80001e6:	4a17      	ldr	r2, [pc, #92]	; (8000244 <main+0x80>)
 80001e8:	f043 0308 	orr.w	r3, r3, #8
 80001ec:	6193      	str	r3, [r2, #24]
	RCC_AFIO_ENABLE();
 80001ee:	4b15      	ldr	r3, [pc, #84]	; (8000244 <main+0x80>)
 80001f0:	69db      	ldr	r3, [r3, #28]
 80001f2:	4a14      	ldr	r2, [pc, #80]	; (8000244 <main+0x80>)
 80001f4:	f043 0301 	orr.w	r3, r3, #1
 80001f8:	61d3      	str	r3, [r2, #28]

	GPIO_Pin_Config conigPin;

	conigPin.Pin_Mode = General_Purpose_Output_PP;
 80001fa:	2304      	movs	r3, #4
 80001fc:	833b      	strh	r3, [r7, #24]
	conigPin.Pin_Number = GPIO_PIN_13;
 80001fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000202:	837b      	strh	r3, [r7, #26]
	conigPin.Pin_Speed = GPIO_Pin_Max_Speed10M;
 8000204:	2301      	movs	r3, #1
 8000206:	773b      	strb	r3, [r7, #28]
	MCAL_GPIO_Init(GPIOB, &conigPin);
 8000208:	f107 0318 	add.w	r3, r7, #24
 800020c:	4619      	mov	r1, r3
 800020e:	480e      	ldr	r0, [pc, #56]	; (8000248 <main+0x84>)
 8000210:	f000 fb94 	bl	800093c <MCAL_GPIO_Init>

	EXTI_pinConfig_t EXTI_pin;
	EXTI_pin.EXTI_GPIO_pin = EXTI9PB9;
 8000214:	4a0d      	ldr	r2, [pc, #52]	; (800024c <main+0x88>)
 8000216:	f107 0308 	add.w	r3, r7, #8
 800021a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800021e:	e883 0003 	stmia.w	r3, {r0, r1}
	EXTI_pin.trigger_case = EXTI_RISING_Trigger;
 8000222:	2300      	movs	r3, #0
 8000224:	743b      	strb	r3, [r7, #16]
	EXTI_pin.P_IRQ_callback = ledtoggling;
 8000226:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <main+0x8c>)
 8000228:	617b      	str	r3, [r7, #20]
	EXTI_pin.IR_EN = EXTI_IRQ_ENABLE;
 800022a:	2301      	movs	r3, #1
 800022c:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_Init(&EXTI_pin);
 800022e:	f107 0308 	add.w	r3, r7, #8
 8000232:	4618      	mov	r0, r3
 8000234:	f000 f99a 	bl	800056c <MCAL_EXTI_GPIO_Init>

	OS_start();
 8000238:	f000 f824 	bl	8000284 <OS_start>

	while(1)
 800023c:	e7fe      	b.n	800023c <main+0x78>
 800023e:	bf00      	nop
 8000240:	e000e100 	.word	0xe000e100
 8000244:	40021000 	.word	0x40021000
 8000248:	40010c00 	.word	0x40010c00
 800024c:	08000ae4 	.word	0x08000ae4
 8000250:	08000255 	.word	0x08000255

08000254 <ledtoggling>:

	}
}

void ledtoggling()
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	MCAL_GPIO_Toggle_Pin(GPIOB, GPIO_PIN_13);
 8000258:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800025c:	4807      	ldr	r0, [pc, #28]	; (800027c <ledtoggling+0x28>)
 800025e:	f000 fc00 	bl	8000a62 <MCAL_GPIO_Toggle_Pin>
	if(task_flag == 0){
 8000262:	4b07      	ldr	r3, [pc, #28]	; (8000280 <ledtoggling+0x2c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d103      	bne.n	8000272 <ledtoggling+0x1e>
		task_flag = 1;
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <ledtoggling+0x2c>)
 800026c:	2201      	movs	r2, #1
 800026e:	601a      	str	r2, [r3, #0]
	}else {
		task_flag = 0;
	}
}
 8000270:	e002      	b.n	8000278 <ledtoggling+0x24>
		task_flag = 0;
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <ledtoggling+0x2c>)
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40010c00 	.word	0x40010c00
 8000280:	20000034 	.word	0x20000034

08000284 <OS_start>:


void OS_start()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	_E_MSP = _S_MSP - 512;
 8000288:	4b2c      	ldr	r3, [pc, #176]	; (800033c <OS_start+0xb8>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000290:	4a2b      	ldr	r2, [pc, #172]	; (8000340 <OS_start+0xbc>)
 8000292:	6013      	str	r3, [r2, #0]

	_S_PSP_TA = _E_MSP - 4;
 8000294:	4b2a      	ldr	r3, [pc, #168]	; (8000340 <OS_start+0xbc>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	3b04      	subs	r3, #4
 800029a:	4a2a      	ldr	r2, [pc, #168]	; (8000344 <OS_start+0xc0>)
 800029c:	6013      	str	r3, [r2, #0]
	_E_PSP_TA = _S_PSP_TA - TASKA_STACK_SIZE;
 800029e:	4b29      	ldr	r3, [pc, #164]	; (8000344 <OS_start+0xc0>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	3b64      	subs	r3, #100	; 0x64
 80002a4:	4a28      	ldr	r2, [pc, #160]	; (8000348 <OS_start+0xc4>)
 80002a6:	6013      	str	r3, [r2, #0]

	_S_PSP_TB = _E_PSP_TA - 4;
 80002a8:	4b27      	ldr	r3, [pc, #156]	; (8000348 <OS_start+0xc4>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	3b04      	subs	r3, #4
 80002ae:	4a27      	ldr	r2, [pc, #156]	; (800034c <OS_start+0xc8>)
 80002b0:	6013      	str	r3, [r2, #0]
	_E_PSP_TB = _S_PSP_TB - TASKB_STACK_SIZE;
 80002b2:	4b26      	ldr	r3, [pc, #152]	; (800034c <OS_start+0xc8>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	3b64      	subs	r3, #100	; 0x64
 80002b8:	4a25      	ldr	r2, [pc, #148]	; (8000350 <OS_start+0xcc>)
 80002ba:	6013      	str	r3, [r2, #0]

	while(1)
	{
		if(task_flag == 0) // add
 80002bc:	4b25      	ldr	r3, [pc, #148]	; (8000354 <OS_start+0xd0>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d11d      	bne.n	8000300 <OS_start+0x7c>
		{
			// add task A psp
			OS_ADD_TO_PSP(_S_PSP_TA);
 80002c4:	4b1f      	ldr	r3, [pc, #124]	; (8000344 <OS_start+0xc0>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4618      	mov	r0, r3
 80002ca:	f380 8809 	msr	PSP, r0

			// switch sp to PSP
			OS_SWITCH_SP_TO_PSP;
 80002ce:	f3ef 8014 	mrs	r0, CONTROL
 80002d2:	f040 0002 	orr.w	r0, r0, #2
 80002d6:	f380 8814 	msr	CONTROL, r0

			// switch to unprivillage Mode
			Switch_To_UnPrivillageMode;
 80002da:	bf00      	nop
 80002dc:	f3ef 8314 	mrs	r3, CONTROL
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	f383 8814 	msr	CONTROL, r3

			taskA(2,3);
 80002e8:	2103      	movs	r1, #3
 80002ea:	2002      	movs	r0, #2
 80002ec:	f7ff ff40 	bl	8000170 <taskA>

			// generate exception to switch to privillage mode
			OS_GENERATE_EXCEPTION;
 80002f0:	df03      	svc	3

			// switch SP to MSP
			OS_SWITCH_SP_TO_MSP;
 80002f2:	f3ef 8014 	mrs	r0, CONTROL
 80002f6:	f000 0005 	and.w	r0, r0, #5
 80002fa:	f380 8814 	msr	CONTROL, r0
 80002fe:	e7dd      	b.n	80002bc <OS_start+0x38>

		}
		else  // subtract
		{
			// add task B psp
			OS_ADD_TO_PSP(_S_PSP_TB);
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <OS_start+0xc8>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4618      	mov	r0, r3
 8000306:	f380 8809 	msr	PSP, r0

			// switch sp to PSP
			OS_SWITCH_SP_TO_PSP;
 800030a:	f3ef 8014 	mrs	r0, CONTROL
 800030e:	f040 0002 	orr.w	r0, r0, #2
 8000312:	f380 8814 	msr	CONTROL, r0

			// switch to unprivillage Mode
			Switch_To_UnPrivillageMode;
 8000316:	bf00      	nop
 8000318:	f3ef 8314 	mrs	r3, CONTROL
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	f383 8814 	msr	CONTROL, r3

			taskB(3,2);
 8000324:	2102      	movs	r1, #2
 8000326:	2003      	movs	r0, #3
 8000328:	f7ff ff2f 	bl	800018a <taskB>

			// generate exception to switch to privillage mode
			OS_GENERATE_EXCEPTION;
 800032c:	df03      	svc	3

			// switch SP to MSP
			OS_SWITCH_SP_TO_MSP;
 800032e:	f3ef 8014 	mrs	r0, CONTROL
 8000332:	f000 0005 	and.w	r0, r0, #5
 8000336:	f380 8814 	msr	CONTROL, r0
		if(task_flag == 0) // add
 800033a:	e7bf      	b.n	80002bc <OS_start+0x38>
 800033c:	20000000 	.word	0x20000000
 8000340:	20000020 	.word	0x20000020
 8000344:	20000024 	.word	0x20000024
 8000348:	20000028 	.word	0x20000028
 800034c:	2000002c 	.word	0x2000002c
 8000350:	20000030 	.word	0x20000030
 8000354:	20000034 	.word	0x20000034

08000358 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000358:	480d      	ldr	r0, [pc, #52]	; (8000390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800035c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000360:	480c      	ldr	r0, [pc, #48]	; (8000394 <LoopForever+0x6>)
  ldr r1, =_edata
 8000362:	490d      	ldr	r1, [pc, #52]	; (8000398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000364:	4a0d      	ldr	r2, [pc, #52]	; (800039c <LoopForever+0xe>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000368:	e002      	b.n	8000370 <LoopCopyDataInit>

0800036a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800036c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036e:	3304      	adds	r3, #4

08000370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000374:	d3f9      	bcc.n	800036a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000376:	4a0a      	ldr	r2, [pc, #40]	; (80003a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000378:	4c0a      	ldr	r4, [pc, #40]	; (80003a4 <LoopForever+0x16>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800037c:	e001      	b.n	8000382 <LoopFillZerobss>

0800037e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000380:	3204      	adds	r2, #4

08000382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000384:	d3fb      	bcc.n	800037e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000386:	f000 fb7d 	bl	8000a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038a:	f7ff ff1b 	bl	80001c4 <main>

0800038e <LoopForever>:

LoopForever:
    b LoopForever
 800038e:	e7fe      	b.n	800038e <LoopForever>
  ldr   r0, =_estack
 8000390:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000398:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800039c:	08000af4 	.word	0x08000af4
  ldr r2, =_sbss
 80003a0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003a4:	20000074 	.word	0x20000074

080003a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a8:	e7fe      	b.n	80003a8 <ADC1_2_IRQHandler>
	...

080003ac <GPIO_Update>:
 *====================================================================
 *						  Generic Functions
 *====================================================================
 */
void GPIO_Update(EXTI_pinConfig_t *EXTI_pin)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	// configure pin as floating input
	GPIO_Pin_Config config_pin;
	config_pin.Pin_Mode = Floating_Input;
 80003b4:	2301      	movs	r3, #1
 80003b6:	813b      	strh	r3, [r7, #8]
	config_pin.Pin_Number = EXTI_pin->EXTI_GPIO_pin.Pin_number;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	889b      	ldrh	r3, [r3, #4]
 80003bc:	817b      	strh	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_pin->EXTI_GPIO_pin.port , &config_pin);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f107 0208 	add.w	r2, r7, #8
 80003c6:	4611      	mov	r1, r2
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 fab7 	bl	800093c <MCAL_GPIO_Init>
	//===============================================================

	// enable AFIO to rout the EXTI
	uint8_t AFIO_EXTICR_index = EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber / 4;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	799b      	ldrb	r3, [r3, #6]
 80003d2:	089b      	lsrs	r3, r3, #2
 80003d4:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_pos = (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber % 4) *4;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	799b      	ldrb	r3, [r3, #6]
 80003da:	f003 0303 	and.w	r3, r3, #3
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	73bb      	strb	r3, [r7, #14]
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_pos);
 80003e4:	4a5a      	ldr	r2, [pc, #360]	; (8000550 <GPIO_Update+0x1a4>)
 80003e6:	7bfb      	ldrb	r3, [r7, #15]
 80003e8:	3302      	adds	r3, #2
 80003ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003ee:	7bbb      	ldrb	r3, [r7, #14]
 80003f0:	210f      	movs	r1, #15
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	43db      	mvns	r3, r3
 80003f8:	4618      	mov	r0, r3
 80003fa:	4955      	ldr	r1, [pc, #340]	; (8000550 <GPIO_Update+0x1a4>)
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	4002      	ands	r2, r0
 8000400:	3302      	adds	r3, #2
 8000402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_EXTI_GPIO_mapping(EXTI_pin->EXTI_GPIO_pin.port)) << AFIO_EXTICR_pos) ;
 8000406:	4a52      	ldr	r2, [pc, #328]	; (8000550 <GPIO_Update+0x1a4>)
 8000408:	7bfb      	ldrb	r3, [r7, #15]
 800040a:	3302      	adds	r3, #2
 800040c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	494f      	ldr	r1, [pc, #316]	; (8000554 <GPIO_Update+0x1a8>)
 8000416:	428b      	cmp	r3, r1
 8000418:	d016      	beq.n	8000448 <GPIO_Update+0x9c>
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	494e      	ldr	r1, [pc, #312]	; (8000558 <GPIO_Update+0x1ac>)
 8000420:	428b      	cmp	r3, r1
 8000422:	d00f      	beq.n	8000444 <GPIO_Update+0x98>
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	494c      	ldr	r1, [pc, #304]	; (800055c <GPIO_Update+0x1b0>)
 800042a:	428b      	cmp	r3, r1
 800042c:	d008      	beq.n	8000440 <GPIO_Update+0x94>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	494b      	ldr	r1, [pc, #300]	; (8000560 <GPIO_Update+0x1b4>)
 8000434:	428b      	cmp	r3, r1
 8000436:	d101      	bne.n	800043c <GPIO_Update+0x90>
 8000438:	2303      	movs	r3, #3
 800043a:	e006      	b.n	800044a <GPIO_Update+0x9e>
 800043c:	2300      	movs	r3, #0
 800043e:	e004      	b.n	800044a <GPIO_Update+0x9e>
 8000440:	2302      	movs	r3, #2
 8000442:	e002      	b.n	800044a <GPIO_Update+0x9e>
 8000444:	2301      	movs	r3, #1
 8000446:	e000      	b.n	800044a <GPIO_Update+0x9e>
 8000448:	2300      	movs	r3, #0
 800044a:	7bb9      	ldrb	r1, [r7, #14]
 800044c:	408b      	lsls	r3, r1
 800044e:	4618      	mov	r0, r3
 8000450:	493f      	ldr	r1, [pc, #252]	; (8000550 <GPIO_Update+0x1a4>)
 8000452:	7bfb      	ldrb	r3, [r7, #15]
 8000454:	4302      	orrs	r2, r0
 8000456:	3302      	adds	r3, #2
 8000458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//================================================================


	//update trigger case Rising or Falling or both
	EXTI->RTSR &= ~(1 << (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber));
 800045c:	4b41      	ldr	r3, [pc, #260]	; (8000564 <GPIO_Update+0x1b8>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	7992      	ldrb	r2, [r2, #6]
 8000464:	4611      	mov	r1, r2
 8000466:	2201      	movs	r2, #1
 8000468:	408a      	lsls	r2, r1
 800046a:	43d2      	mvns	r2, r2
 800046c:	4611      	mov	r1, r2
 800046e:	4a3d      	ldr	r2, [pc, #244]	; (8000564 <GPIO_Update+0x1b8>)
 8000470:	400b      	ands	r3, r1
 8000472:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber));
 8000474:	4b3b      	ldr	r3, [pc, #236]	; (8000564 <GPIO_Update+0x1b8>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	7992      	ldrb	r2, [r2, #6]
 800047c:	4611      	mov	r1, r2
 800047e:	2201      	movs	r2, #1
 8000480:	408a      	lsls	r2, r1
 8000482:	43d2      	mvns	r2, r2
 8000484:	4611      	mov	r1, r2
 8000486:	4a37      	ldr	r2, [pc, #220]	; (8000564 <GPIO_Update+0x1b8>)
 8000488:	400b      	ands	r3, r1
 800048a:	60d3      	str	r3, [r2, #12]

	if (EXTI_pin->trigger_case == EXTI_RISING_Trigger)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	7a1b      	ldrb	r3, [r3, #8]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d10b      	bne.n	80004ac <GPIO_Update+0x100>
	{
		EXTI->RTSR |= (1 << (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber));
 8000494:	4b33      	ldr	r3, [pc, #204]	; (8000564 <GPIO_Update+0x1b8>)
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	7992      	ldrb	r2, [r2, #6]
 800049c:	4611      	mov	r1, r2
 800049e:	2201      	movs	r2, #1
 80004a0:	408a      	lsls	r2, r1
 80004a2:	4611      	mov	r1, r2
 80004a4:	4a2f      	ldr	r2, [pc, #188]	; (8000564 <GPIO_Update+0x1b8>)
 80004a6:	430b      	orrs	r3, r1
 80004a8:	6093      	str	r3, [r2, #8]
 80004aa:	e029      	b.n	8000500 <GPIO_Update+0x154>
	}
	else if(EXTI_pin->trigger_case == EXTI_FALLING_Trigger)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	7a1b      	ldrb	r3, [r3, #8]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d10b      	bne.n	80004cc <GPIO_Update+0x120>
	{
		EXTI->FTSR |= (1 << (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber));
 80004b4:	4b2b      	ldr	r3, [pc, #172]	; (8000564 <GPIO_Update+0x1b8>)
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	687a      	ldr	r2, [r7, #4]
 80004ba:	7992      	ldrb	r2, [r2, #6]
 80004bc:	4611      	mov	r1, r2
 80004be:	2201      	movs	r2, #1
 80004c0:	408a      	lsls	r2, r1
 80004c2:	4611      	mov	r1, r2
 80004c4:	4a27      	ldr	r2, [pc, #156]	; (8000564 <GPIO_Update+0x1b8>)
 80004c6:	430b      	orrs	r3, r1
 80004c8:	60d3      	str	r3, [r2, #12]
 80004ca:	e019      	b.n	8000500 <GPIO_Update+0x154>
	}
	else if(EXTI_pin->trigger_case == EXTI_RisingAndFalling_trigger)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	7a1b      	ldrb	r3, [r3, #8]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d115      	bne.n	8000500 <GPIO_Update+0x154>
	{
		EXTI->RTSR |= (1 << (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber));
 80004d4:	4b23      	ldr	r3, [pc, #140]	; (8000564 <GPIO_Update+0x1b8>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	7992      	ldrb	r2, [r2, #6]
 80004dc:	4611      	mov	r1, r2
 80004de:	2201      	movs	r2, #1
 80004e0:	408a      	lsls	r2, r1
 80004e2:	4611      	mov	r1, r2
 80004e4:	4a1f      	ldr	r2, [pc, #124]	; (8000564 <GPIO_Update+0x1b8>)
 80004e6:	430b      	orrs	r3, r1
 80004e8:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber));
 80004ea:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <GPIO_Update+0x1b8>)
 80004ec:	68db      	ldr	r3, [r3, #12]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	7992      	ldrb	r2, [r2, #6]
 80004f2:	4611      	mov	r1, r2
 80004f4:	2201      	movs	r2, #1
 80004f6:	408a      	lsls	r2, r1
 80004f8:	4611      	mov	r1, r2
 80004fa:	4a1a      	ldr	r2, [pc, #104]	; (8000564 <GPIO_Update+0x1b8>)
 80004fc:	430b      	orrs	r3, r1
 80004fe:	60d3      	str	r3, [r2, #12]
	}
	//==================================================================

	// update the IRQ call_back function
	GP_IRQ_Callback_FUNS[EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber] = EXTI_pin->P_IRQ_callback;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	799b      	ldrb	r3, [r3, #6]
 8000504:	4619      	mov	r1, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	4a17      	ldr	r2, [pc, #92]	; (8000568 <GPIO_Update+0x1bc>)
 800050c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//==================================================================

	// enable/disable EXTI
	if(EXTI_pin->IR_EN == EXTI_IRQ_ENABLE)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	7a5b      	ldrb	r3, [r3, #9]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d10b      	bne.n	8000530 <GPIO_Update+0x184>
	{
		EXTI->IMR |= (1 << (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber));
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <GPIO_Update+0x1b8>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	7992      	ldrb	r2, [r2, #6]
 8000520:	4611      	mov	r1, r2
 8000522:	2201      	movs	r2, #1
 8000524:	408a      	lsls	r2, r1
 8000526:	4611      	mov	r1, r2
 8000528:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <GPIO_Update+0x1b8>)
 800052a:	430b      	orrs	r3, r1
 800052c:	6013      	str	r3, [r2, #0]
	}else
	{
		EXTI->IMR &= ~(1 << (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber));
	}

}
 800052e:	e00b      	b.n	8000548 <GPIO_Update+0x19c>
		EXTI->IMR &= ~(1 << (EXTI_pin->EXTI_GPIO_pin.EXTI_InputLineNumber));
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <GPIO_Update+0x1b8>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	7992      	ldrb	r2, [r2, #6]
 8000538:	4611      	mov	r1, r2
 800053a:	2201      	movs	r2, #1
 800053c:	408a      	lsls	r2, r1
 800053e:	43d2      	mvns	r2, r2
 8000540:	4611      	mov	r1, r2
 8000542:	4a08      	ldr	r2, [pc, #32]	; (8000564 <GPIO_Update+0x1b8>)
 8000544:	400b      	ands	r3, r1
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40010000 	.word	0x40010000
 8000554:	40010800 	.word	0x40010800
 8000558:	40010c00 	.word	0x40010c00
 800055c:	40011000 	.word	0x40011000
 8000560:	40011400 	.word	0x40011400
 8000564:	40010400 	.word	0x40010400
 8000568:	20000038 	.word	0x20000038

0800056c <MCAL_EXTI_GPIO_Init>:
 *					APIs Functions Declaration
 *====================================================================
 */

void MCAL_EXTI_GPIO_Init(EXTI_pinConfig_t *EXTI_pin)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	GPIO_Update(EXTI_pin);
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f7ff ff19 	bl	80003ac <GPIO_Update>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <EXTI0_IRQHandler>:
	NVIC_IRQ23_EXTI5_9_DISABLE;
	NVIC_IRQ40_EXTI10_15_DISABLE;
}

void EXTI0_IRQHandler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	//clear IRQ by writing 1 into pending registers EXTI_PR
	EXTI->PR |= (1 << 0);
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <EXTI0_IRQHandler+0x1c>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <EXTI0_IRQHandler+0x1c>)
 800058e:	f043 0301 	orr.w	r3, r3, #1
 8000592:	6153      	str	r3, [r2, #20]
	// call the IRQ callback function
	GP_IRQ_Callback_FUNS[0]();
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <EXTI0_IRQHandler+0x20>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4798      	blx	r3

}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40010400 	.word	0x40010400
 80005a4:	20000038 	.word	0x20000038

080005a8 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	//clear IRQ by writing 1 into pending registers EXTI_PR
	EXTI->PR |= (1 << 1);
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <EXTI1_IRQHandler+0x1c>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <EXTI1_IRQHandler+0x1c>)
 80005b2:	f043 0302 	orr.w	r3, r3, #2
 80005b6:	6153      	str	r3, [r2, #20]
	// call the IRQ callback function
	GP_IRQ_Callback_FUNS[1]();
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <EXTI1_IRQHandler+0x20>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	4798      	blx	r3
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40010400 	.word	0x40010400
 80005c8:	20000038 	.word	0x20000038

080005cc <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	//clear IRQ by writing 1 into pending registers EXTI_PR
	EXTI->PR |= (1 << 2);
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <EXTI2_IRQHandler+0x1c>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <EXTI2_IRQHandler+0x1c>)
 80005d6:	f043 0304 	orr.w	r3, r3, #4
 80005da:	6153      	str	r3, [r2, #20]
	// call the IRQ callback function
	GP_IRQ_Callback_FUNS[2]();
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <EXTI2_IRQHandler+0x20>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	4798      	blx	r3
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40010400 	.word	0x40010400
 80005ec:	20000038 	.word	0x20000038

080005f0 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	//clear IRQ by writing 1 into pending registers EXTI_PR
	EXTI->PR |= (1 << 3);
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <EXTI3_IRQHandler+0x1c>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	4a04      	ldr	r2, [pc, #16]	; (800060c <EXTI3_IRQHandler+0x1c>)
 80005fa:	f043 0308 	orr.w	r3, r3, #8
 80005fe:	6153      	str	r3, [r2, #20]
	// call the IRQ callback function
	GP_IRQ_Callback_FUNS[3]();
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <EXTI3_IRQHandler+0x20>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	4798      	blx	r3
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40010400 	.word	0x40010400
 8000610:	20000038 	.word	0x20000038

08000614 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	//clear IRQ by writing 1 into pending registers EXTI_PR
	EXTI->PR |= (1 << 4);
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <EXTI4_IRQHandler+0x1c>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <EXTI4_IRQHandler+0x1c>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6153      	str	r3, [r2, #20]
	// call the IRQ callback function
	GP_IRQ_Callback_FUNS[4]();
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <EXTI4_IRQHandler+0x20>)
 8000626:	691b      	ldr	r3, [r3, #16]
 8000628:	4798      	blx	r3
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40010400 	.word	0x40010400
 8000634:	20000038 	.word	0x20000038

08000638 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 5) 		{EXTI->PR |= 1 << 5;   GP_IRQ_Callback_FUNS[5]();}
 800063c:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <EXTI9_5_IRQHandler+0xa0>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	f003 0320 	and.w	r3, r3, #32
 8000644:	2b00      	cmp	r3, #0
 8000646:	d008      	beq.n	800065a <EXTI9_5_IRQHandler+0x22>
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <EXTI9_5_IRQHandler+0xa0>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	4a22      	ldr	r2, [pc, #136]	; (80006d8 <EXTI9_5_IRQHandler+0xa0>)
 800064e:	f043 0320 	orr.w	r3, r3, #32
 8000652:	6153      	str	r3, [r2, #20]
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <EXTI9_5_IRQHandler+0xa4>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4798      	blx	r3
	if(EXTI->PR & 1 << 6) 		{EXTI->PR |= 1 << 6;   GP_IRQ_Callback_FUNS[6]();}
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <EXTI9_5_IRQHandler+0xa0>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000662:	2b00      	cmp	r3, #0
 8000664:	d008      	beq.n	8000678 <EXTI9_5_IRQHandler+0x40>
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <EXTI9_5_IRQHandler+0xa0>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a1b      	ldr	r2, [pc, #108]	; (80006d8 <EXTI9_5_IRQHandler+0xa0>)
 800066c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <EXTI9_5_IRQHandler+0xa4>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	4798      	blx	r3
	if(EXTI->PR & 1 << 7) 		{EXTI->PR |= 1 << 7;   GP_IRQ_Callback_FUNS[7]();}
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <EXTI9_5_IRQHandler+0xa0>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000680:	2b00      	cmp	r3, #0
 8000682:	d008      	beq.n	8000696 <EXTI9_5_IRQHandler+0x5e>
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <EXTI9_5_IRQHandler+0xa0>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <EXTI9_5_IRQHandler+0xa0>)
 800068a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800068e:	6153      	str	r3, [r2, #20]
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <EXTI9_5_IRQHandler+0xa4>)
 8000692:	69db      	ldr	r3, [r3, #28]
 8000694:	4798      	blx	r3
	if(EXTI->PR & 1 << 8) 		{EXTI->PR |= 1 << 8;   GP_IRQ_Callback_FUNS[8]();}
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <EXTI9_5_IRQHandler+0xa0>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d008      	beq.n	80006b4 <EXTI9_5_IRQHandler+0x7c>
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <EXTI9_5_IRQHandler+0xa0>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <EXTI9_5_IRQHandler+0xa0>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ac:	6153      	str	r3, [r2, #20]
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <EXTI9_5_IRQHandler+0xa4>)
 80006b0:	6a1b      	ldr	r3, [r3, #32]
 80006b2:	4798      	blx	r3
	if(EXTI->PR & 1 << 9) 		{EXTI->PR |= 1 << 9;   GP_IRQ_Callback_FUNS[9]();}
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <EXTI9_5_IRQHandler+0xa0>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d008      	beq.n	80006d2 <EXTI9_5_IRQHandler+0x9a>
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <EXTI9_5_IRQHandler+0xa0>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <EXTI9_5_IRQHandler+0xa0>)
 80006c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006ca:	6153      	str	r3, [r2, #20]
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <EXTI9_5_IRQHandler+0xa4>)
 80006ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d0:	4798      	blx	r3
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40010400 	.word	0x40010400
 80006dc:	20000038 	.word	0x20000038

080006e0 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 10) 		{EXTI->PR |= 1 << 10;   GP_IRQ_Callback_FUNS[10]();}
 80006e4:	4b2d      	ldr	r3, [pc, #180]	; (800079c <EXTI15_10_IRQHandler+0xbc>)
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d008      	beq.n	8000702 <EXTI15_10_IRQHandler+0x22>
 80006f0:	4b2a      	ldr	r3, [pc, #168]	; (800079c <EXTI15_10_IRQHandler+0xbc>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	4a29      	ldr	r2, [pc, #164]	; (800079c <EXTI15_10_IRQHandler+0xbc>)
 80006f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006fa:	6153      	str	r3, [r2, #20]
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <EXTI15_10_IRQHandler+0xc0>)
 80006fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000700:	4798      	blx	r3
	if(EXTI->PR & 1 << 11) 		{EXTI->PR |= 1 << 11;   GP_IRQ_Callback_FUNS[11]();}
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <EXTI15_10_IRQHandler+0xbc>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800070a:	2b00      	cmp	r3, #0
 800070c:	d008      	beq.n	8000720 <EXTI15_10_IRQHandler+0x40>
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <EXTI15_10_IRQHandler+0xbc>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <EXTI15_10_IRQHandler+0xbc>)
 8000714:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000718:	6153      	str	r3, [r2, #20]
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <EXTI15_10_IRQHandler+0xc0>)
 800071c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071e:	4798      	blx	r3
	if(EXTI->PR & 1 << 12) 		{EXTI->PR |= 1 << 12;   GP_IRQ_Callback_FUNS[12]();}
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <EXTI15_10_IRQHandler+0xbc>)
 8000722:	695b      	ldr	r3, [r3, #20]
 8000724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000728:	2b00      	cmp	r3, #0
 800072a:	d008      	beq.n	800073e <EXTI15_10_IRQHandler+0x5e>
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <EXTI15_10_IRQHandler+0xbc>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	4a1a      	ldr	r2, [pc, #104]	; (800079c <EXTI15_10_IRQHandler+0xbc>)
 8000732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000736:	6153      	str	r3, [r2, #20]
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <EXTI15_10_IRQHandler+0xc0>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073c:	4798      	blx	r3
	if(EXTI->PR & 1 << 13) 		{EXTI->PR |= 1 << 13;   GP_IRQ_Callback_FUNS[13]();}
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <EXTI15_10_IRQHandler+0xbc>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d008      	beq.n	800075c <EXTI15_10_IRQHandler+0x7c>
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <EXTI15_10_IRQHandler+0xbc>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a13      	ldr	r2, [pc, #76]	; (800079c <EXTI15_10_IRQHandler+0xbc>)
 8000750:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000754:	6153      	str	r3, [r2, #20]
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <EXTI15_10_IRQHandler+0xc0>)
 8000758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800075a:	4798      	blx	r3
	if(EXTI->PR & 1 << 14) 		{EXTI->PR |= 1 << 14;   GP_IRQ_Callback_FUNS[14]();}
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <EXTI15_10_IRQHandler+0xbc>)
 800075e:	695b      	ldr	r3, [r3, #20]
 8000760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000764:	2b00      	cmp	r3, #0
 8000766:	d008      	beq.n	800077a <EXTI15_10_IRQHandler+0x9a>
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <EXTI15_10_IRQHandler+0xbc>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	4a0b      	ldr	r2, [pc, #44]	; (800079c <EXTI15_10_IRQHandler+0xbc>)
 800076e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000772:	6153      	str	r3, [r2, #20]
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <EXTI15_10_IRQHandler+0xc0>)
 8000776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000778:	4798      	blx	r3
	if(EXTI->PR & 1 << 15) 		{EXTI->PR |= 1 << 15;   GP_IRQ_Callback_FUNS[15]();}
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <EXTI15_10_IRQHandler+0xbc>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d008      	beq.n	8000798 <EXTI15_10_IRQHandler+0xb8>
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <EXTI15_10_IRQHandler+0xbc>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a04      	ldr	r2, [pc, #16]	; (800079c <EXTI15_10_IRQHandler+0xbc>)
 800078c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000790:	6153      	str	r3, [r2, #20]
 8000792:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <EXTI15_10_IRQHandler+0xc0>)
 8000794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000796:	4798      	blx	r3
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40010400 	.word	0x40010400
 80007a0:	20000038 	.word	0x20000038

080007a4 <Get_CRLH_loc>:

#include "stm32f103x6_gpio_driver.h"
#include "stm32f103x6.h"

uint8_t Get_CRLH_loc(int pin_number)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	switch(pin_number)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007b2:	f000 80bb 	beq.w	800092c <Get_CRLH_loc+0x188>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007bc:	f300 80b8 	bgt.w	8000930 <Get_CRLH_loc+0x18c>
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007c6:	f000 80af 	beq.w	8000928 <Get_CRLH_loc+0x184>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007d0:	f300 80ae 	bgt.w	8000930 <Get_CRLH_loc+0x18c>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007da:	f000 80a3 	beq.w	8000924 <Get_CRLH_loc+0x180>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007e4:	f300 80a4 	bgt.w	8000930 <Get_CRLH_loc+0x18c>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007ee:	f000 8097 	beq.w	8000920 <Get_CRLH_loc+0x17c>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007f8:	f300 809a 	bgt.w	8000930 <Get_CRLH_loc+0x18c>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000802:	f000 808b 	beq.w	800091c <Get_CRLH_loc+0x178>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800080c:	f300 8090 	bgt.w	8000930 <Get_CRLH_loc+0x18c>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000816:	d07f      	beq.n	8000918 <Get_CRLH_loc+0x174>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800081e:	f300 8087 	bgt.w	8000930 <Get_CRLH_loc+0x18c>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000828:	d074      	beq.n	8000914 <Get_CRLH_loc+0x170>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000830:	dc7e      	bgt.n	8000930 <Get_CRLH_loc+0x18c>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000838:	d06a      	beq.n	8000910 <Get_CRLH_loc+0x16c>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000840:	dc76      	bgt.n	8000930 <Get_CRLH_loc+0x18c>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b80      	cmp	r3, #128	; 0x80
 8000846:	d061      	beq.n	800090c <Get_CRLH_loc+0x168>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b80      	cmp	r3, #128	; 0x80
 800084c:	dc70      	bgt.n	8000930 <Get_CRLH_loc+0x18c>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b20      	cmp	r3, #32
 8000852:	dc49      	bgt.n	80008e8 <Get_CRLH_loc+0x144>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	dd6a      	ble.n	8000930 <Get_CRLH_loc+0x18c>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3b01      	subs	r3, #1
 800085e:	2b1f      	cmp	r3, #31
 8000860:	d866      	bhi.n	8000930 <Get_CRLH_loc+0x18c>
 8000862:	a201      	add	r2, pc, #4	; (adr r2, 8000868 <Get_CRLH_loc+0xc4>)
 8000864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000868:	080008f1 	.word	0x080008f1
 800086c:	080008f5 	.word	0x080008f5
 8000870:	08000931 	.word	0x08000931
 8000874:	080008f9 	.word	0x080008f9
 8000878:	08000931 	.word	0x08000931
 800087c:	08000931 	.word	0x08000931
 8000880:	08000931 	.word	0x08000931
 8000884:	080008fd 	.word	0x080008fd
 8000888:	08000931 	.word	0x08000931
 800088c:	08000931 	.word	0x08000931
 8000890:	08000931 	.word	0x08000931
 8000894:	08000931 	.word	0x08000931
 8000898:	08000931 	.word	0x08000931
 800089c:	08000931 	.word	0x08000931
 80008a0:	08000931 	.word	0x08000931
 80008a4:	08000901 	.word	0x08000901
 80008a8:	08000931 	.word	0x08000931
 80008ac:	08000931 	.word	0x08000931
 80008b0:	08000931 	.word	0x08000931
 80008b4:	08000931 	.word	0x08000931
 80008b8:	08000931 	.word	0x08000931
 80008bc:	08000931 	.word	0x08000931
 80008c0:	08000931 	.word	0x08000931
 80008c4:	08000931 	.word	0x08000931
 80008c8:	08000931 	.word	0x08000931
 80008cc:	08000931 	.word	0x08000931
 80008d0:	08000931 	.word	0x08000931
 80008d4:	08000931 	.word	0x08000931
 80008d8:	08000931 	.word	0x08000931
 80008dc:	08000931 	.word	0x08000931
 80008e0:	08000931 	.word	0x08000931
 80008e4:	08000905 	.word	0x08000905
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b40      	cmp	r3, #64	; 0x40
 80008ec:	d00c      	beq.n	8000908 <Get_CRLH_loc+0x164>
 80008ee:	e01f      	b.n	8000930 <Get_CRLH_loc+0x18c>
	{
	case GPIO_PIN_0 :
		return 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	e01e      	b.n	8000932 <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_1 :
		return 4;
 80008f4:	2304      	movs	r3, #4
 80008f6:	e01c      	b.n	8000932 <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_2 :
		return 8;
 80008f8:	2308      	movs	r3, #8
 80008fa:	e01a      	b.n	8000932 <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_3 :
		return 12;
 80008fc:	230c      	movs	r3, #12
 80008fe:	e018      	b.n	8000932 <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_4 :
		return 16;
 8000900:	2310      	movs	r3, #16
 8000902:	e016      	b.n	8000932 <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_5 :
		return 20;
 8000904:	2314      	movs	r3, #20
 8000906:	e014      	b.n	8000932 <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_6 :
		return 24;
 8000908:	2318      	movs	r3, #24
 800090a:	e012      	b.n	8000932 <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_7 :
		return 28;
 800090c:	231c      	movs	r3, #28
 800090e:	e010      	b.n	8000932 <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_8 :
		return 0;
 8000910:	2300      	movs	r3, #0
 8000912:	e00e      	b.n	8000932 <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_9 :
		return 4;
 8000914:	2304      	movs	r3, #4
 8000916:	e00c      	b.n	8000932 <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_10 :
		return 8;
 8000918:	2308      	movs	r3, #8
 800091a:	e00a      	b.n	8000932 <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_11 :
		return 12;
 800091c:	230c      	movs	r3, #12
 800091e:	e008      	b.n	8000932 <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_12 :
		return 16;
 8000920:	2310      	movs	r3, #16
 8000922:	e006      	b.n	8000932 <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_13 :
		return 20;
 8000924:	2314      	movs	r3, #20
 8000926:	e004      	b.n	8000932 <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_14 :
		return 24;
 8000928:	2318      	movs	r3, #24
 800092a:	e002      	b.n	8000932 <Get_CRLH_loc+0x18e>
		break;

	case GPIO_PIN_15 :
		return 28;
 800092c:	231c      	movs	r3, #28
 800092e:	e000      	b.n	8000932 <Get_CRLH_loc+0x18e>
		break;
	}

	return 0;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <MCAL_GPIO_Init>:




void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_Pin_Config *pinconfig  )
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	// check on pin if at CRL or CRH --------
	volatile uint32_t *config_register = NULL;
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_config;
	config_register = (pinconfig->Pin_Number > GPIO_PIN_7) ?   &GPIOx->CRH : &GPIOx->CRL;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	885b      	ldrh	r3, [r3, #2]
 800094e:	2b80      	cmp	r3, #128	; 0x80
 8000950:	d902      	bls.n	8000958 <MCAL_GPIO_Init+0x1c>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3304      	adds	r3, #4
 8000956:	e000      	b.n	800095a <MCAL_GPIO_Init+0x1e>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	60bb      	str	r3, [r7, #8]


	(*config_register) &= ~(0xF<<Get_CRLH_loc(pinconfig->Pin_Number)); //reset the specific bits to write on them
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	885b      	ldrh	r3, [r3, #2]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff1f 	bl	80007a4 <Get_CRLH_loc>
 8000966:	4603      	mov	r3, r0
 8000968:	461a      	mov	r2, r3
 800096a:	230f      	movs	r3, #15
 800096c:	4093      	lsls	r3, r2
 800096e:	43da      	mvns	r2, r3
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	401a      	ands	r2, r3
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	601a      	str	r2, [r3, #0]
	// input pin
	if (pinconfig->Pin_Mode == Analog_Mode || pinconfig->Pin_Mode == Floating_Input || pinconfig->Pin_Mode == Input_Pull_Up || pinconfig->Pin_Mode == Input_Pull_Down)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00b      	beq.n	800099a <MCAL_GPIO_Init+0x5e>
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d007      	beq.n	800099a <MCAL_GPIO_Init+0x5e>
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d003      	beq.n	800099a <MCAL_GPIO_Init+0x5e>
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	2b03      	cmp	r3, #3
 8000998:	d145      	bne.n	8000a26 <MCAL_GPIO_Init+0xea>
	{
		PIN_config = 0;  // input pin
 800099a:	2300      	movs	r3, #0
 800099c:	73fb      	strb	r3, [r7, #15]
		if (pinconfig->Pin_Mode == Input_Pull_Up)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d110      	bne.n	80009c8 <MCAL_GPIO_Init+0x8c>
		{
			PIN_config |= (pinconfig->Pin_Mode<<2);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	b25a      	sxtb	r2, r3
 80009ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	b25b      	sxtb	r3, r3
 80009b6:	73fb      	strb	r3, [r7, #15]
			GPIOx->ODR |= pinconfig->Pin_Number;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	683a      	ldr	r2, [r7, #0]
 80009be:	8852      	ldrh	r2, [r2, #2]
 80009c0:	431a      	orrs	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	e01f      	b.n	8000a08 <MCAL_GPIO_Init+0xcc>
		}
		else if( pinconfig->Pin_Mode == Input_Pull_Down)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	d112      	bne.n	80009f6 <MCAL_GPIO_Init+0xba>
		{
			PIN_config |= ((pinconfig->Pin_Mode-1)<<2);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	b25a      	sxtb	r2, r3
 80009da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009de:	4313      	orrs	r3, r2
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	73fb      	strb	r3, [r7, #15]
			GPIOx->ODR &= (~pinconfig->Pin_Number);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	8852      	ldrh	r2, [r2, #2]
 80009ec:	43d2      	mvns	r2, r2
 80009ee:	401a      	ands	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	e008      	b.n	8000a08 <MCAL_GPIO_Init+0xcc>
		}
		else
		{
			PIN_config |= (pinconfig->Pin_Mode<<2);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	b25a      	sxtb	r2, r3
 80009fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b25b      	sxtb	r3, r3
 8000a06:	73fb      	strb	r3, [r7, #15]
		}

		(*config_register) |= (PIN_config << Get_CRLH_loc(pinconfig->Pin_Number));
 8000a08:	7bfc      	ldrb	r4, [r7, #15]
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	885b      	ldrh	r3, [r3, #2]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fec8 	bl	80007a4 <Get_CRLH_loc>
 8000a14:	4603      	mov	r3, r0
 8000a16:	fa04 f203 	lsl.w	r2, r4, r3
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	e019      	b.n	8000a5a <MCAL_GPIO_Init+0x11e>
	}
	else // output pin
	{
		PIN_config = (((pinconfig->Pin_Mode)-0x4)<<2) | ((pinconfig->Pin_Speed)<<0);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	3b04      	subs	r3, #4
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	b25a      	sxtb	r2, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	791b      	ldrb	r3, [r3, #4]
 8000a34:	b25b      	sxtb	r3, r3
 8000a36:	4313      	orrs	r3, r2
 8000a38:	b25b      	sxtb	r3, r3
 8000a3a:	73fb      	strb	r3, [r7, #15]
		(*config_register) |= (PIN_config << Get_CRLH_loc(pinconfig->Pin_Number));
 8000a3c:	7bfc      	ldrb	r4, [r7, #15]
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	885b      	ldrh	r3, [r3, #2]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff feae 	bl	80007a4 <Get_CRLH_loc>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	fa04 f203 	lsl.w	r2, r4, r3
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	431a      	orrs	r2, r3
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	601a      	str	r2, [r3, #0]

	}
}
 8000a58:	bf00      	nop
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd90      	pop	{r4, r7, pc}

08000a62 <MCAL_GPIO_Toggle_Pin>:
void MCAL_GPIO_Write_Port(GPIO_TypeDef * GPIOx  , uint16_t value)
{
	GPIOx->ODR = (uint32_t)value ;
}
void MCAL_GPIO_Toggle_Pin(GPIO_TypeDef * GPIOx ,  uint16_t pinnumber)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= pinnumber;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	68da      	ldr	r2, [r3, #12]
 8000a72:	887b      	ldrh	r3, [r7, #2]
 8000a74:	405a      	eors	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	60da      	str	r2, [r3, #12]
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <__libc_init_array>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	2600      	movs	r6, #0
 8000a88:	4d0c      	ldr	r5, [pc, #48]	; (8000abc <__libc_init_array+0x38>)
 8000a8a:	4c0d      	ldr	r4, [pc, #52]	; (8000ac0 <__libc_init_array+0x3c>)
 8000a8c:	1b64      	subs	r4, r4, r5
 8000a8e:	10a4      	asrs	r4, r4, #2
 8000a90:	42a6      	cmp	r6, r4
 8000a92:	d109      	bne.n	8000aa8 <__libc_init_array+0x24>
 8000a94:	f000 f81a 	bl	8000acc <_init>
 8000a98:	2600      	movs	r6, #0
 8000a9a:	4d0a      	ldr	r5, [pc, #40]	; (8000ac4 <__libc_init_array+0x40>)
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ac8 <__libc_init_array+0x44>)
 8000a9e:	1b64      	subs	r4, r4, r5
 8000aa0:	10a4      	asrs	r4, r4, #2
 8000aa2:	42a6      	cmp	r6, r4
 8000aa4:	d105      	bne.n	8000ab2 <__libc_init_array+0x2e>
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aac:	4798      	blx	r3
 8000aae:	3601      	adds	r6, #1
 8000ab0:	e7ee      	b.n	8000a90 <__libc_init_array+0xc>
 8000ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab6:	4798      	blx	r3
 8000ab8:	3601      	adds	r6, #1
 8000aba:	e7f2      	b.n	8000aa2 <__libc_init_array+0x1e>
 8000abc:	08000aec 	.word	0x08000aec
 8000ac0:	08000aec 	.word	0x08000aec
 8000ac4:	08000aec 	.word	0x08000aec
 8000ac8:	08000af0 	.word	0x08000af0

08000acc <_init>:
 8000acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ace:	bf00      	nop
 8000ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ad2:	bc08      	pop	{r3}
 8000ad4:	469e      	mov	lr, r3
 8000ad6:	4770      	bx	lr

08000ad8 <_fini>:
 8000ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ada:	bf00      	nop
 8000adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ade:	bc08      	pop	{r3}
 8000ae0:	469e      	mov	lr, r3
 8000ae2:	4770      	bx	lr
