
drivers_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000434  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000564  0800056c  0001056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000564  08000564  0001056c  2**0
                  CONTENTS
  4 .ARM          00000000  08000564  08000564  0001056c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000564  0800056c  0001056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000564  08000564  00010564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000568  08000568  00010568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  20000000  0800056c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  0800056c  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001056c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f72  00000000  00000000  00010595  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000354  00000000  00000000  00011507  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000034c  00000000  00000000  0001185b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000d8  00000000  00000000  00011ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000b0  00000000  00000000  00011c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002616  00000000  00000000  00011d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000fbf  00000000  00000000  00014346  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000ba7c  00000000  00000000  00015305  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000be  00000000  00000000  00020d81  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000228  00000000  00000000  00020e40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800054c 	.word	0x0800054c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800054c 	.word	0x0800054c

08000170 <main>:

void OS_SVC(int *stackFrame);
int OS_SVC_Set(int a, int b, unsigned char SVC_ID);

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//add
	OS_SVC_Set(1,3,0);
 8000174:	2200      	movs	r2, #0
 8000176:	2103      	movs	r1, #3
 8000178:	2001      	movs	r0, #1
 800017a:	f000 f811 	bl	80001a0 <OS_SVC_Set>

	//subtract
	OS_SVC_Set(5,2,1);
 800017e:	2201      	movs	r2, #1
 8000180:	2102      	movs	r1, #2
 8000182:	2005      	movs	r0, #5
 8000184:	f000 f80c 	bl	80001a0 <OS_SVC_Set>

	//multiply
	OS_SVC_Set(3,4,2);
 8000188:	2202      	movs	r2, #2
 800018a:	2104      	movs	r1, #4
 800018c:	2003      	movs	r0, #3
 800018e:	f000 f807 	bl	80001a0 <OS_SVC_Set>

	//make pendsv exception
	OS_SVC_Set(3,4,3);
 8000192:	2203      	movs	r2, #3
 8000194:	2104      	movs	r1, #4
 8000196:	2003      	movs	r0, #3
 8000198:	f000 f802 	bl	80001a0 <OS_SVC_Set>

	while(1)
 800019c:	e7fe      	b.n	800019c <main+0x2c>
	...

080001a0 <OS_SVC_Set>:

	}
}

int OS_SVC_Set(int a, int b, unsigned char SVC_ID)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b087      	sub	sp, #28
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	60f8      	str	r0, [r7, #12]
 80001a8:	60b9      	str	r1, [r7, #8]
 80001aa:	4613      	mov	r3, r2
 80001ac:	71fb      	strb	r3, [r7, #7]
	switch(SVC_ID) {
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	2b03      	cmp	r3, #3
 80001b2:	d813      	bhi.n	80001dc <OS_SVC_Set+0x3c>
 80001b4:	a201      	add	r2, pc, #4	; (adr r2, 80001bc <OS_SVC_Set+0x1c>)
 80001b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ba:	bf00      	nop
 80001bc:	080001cd 	.word	0x080001cd
 80001c0:	080001d1 	.word	0x080001d1
 80001c4:	080001d5 	.word	0x080001d5
 80001c8:	080001d9 	.word	0x080001d9
		case 0:
			__asm("svc #0x00");
 80001cc:	df00      	svc	0
			break;
 80001ce:	e005      	b.n	80001dc <OS_SVC_Set+0x3c>
		case 1:
			__asm("svc #0x01");
 80001d0:	df01      	svc	1
			break;
 80001d2:	e003      	b.n	80001dc <OS_SVC_Set+0x3c>
		case 2:
			__asm("svc #0x02");
 80001d4:	df02      	svc	2
			break;
 80001d6:	e001      	b.n	80001dc <OS_SVC_Set+0x3c>
		case 3:
			__asm("svc #0x03");
 80001d8:	df03      	svc	3
			break;
 80001da:	bf00      	nop
	}

	int result;
	__asm ("mov %0, r0" : "=r" (result));
 80001dc:	4603      	mov	r3, r0
 80001de:	617b      	str	r3, [r7, #20]
	return result;
 80001e0:	697b      	ldr	r3, [r7, #20]
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	371c      	adds	r7, #28
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr

080001ec <SVC_Handler>:

__attribute ((naked)) void SVC_Handler()
{
	asm("tst lr , #4 \n\t"
 80001ec:	f01e 0f04 	tst.w	lr, #4
 80001f0:	bf0c      	ite	eq
 80001f2:	f3ef 8008 	mrseq	r0, MSP
 80001f6:	f3ef 8009 	mrsne	r0, PSP
 80001fa:	f000 b80b 	b.w	8000214 <OS_SVC>
		"ITE EQ \n\t"
		"mrseq r0, MSP \n\t"
		"mrsne r0, PSP \n\t"
		"b OS_SVC");
}
 80001fe:	bf00      	nop

08000200 <PendSV_Handler>:


__attribute ((naked)) void PendSV_Handler()
{
	*SCB_ICSR |= 1 << ICSR_PendSVCLR_Msk;
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <PendSV_Handler+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a02      	ldr	r2, [pc, #8]	; (8000210 <PendSV_Handler+0x10>)
 8000206:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800020a:	6013      	str	r3, [r2, #0]
}
 800020c:	bf00      	nop
 800020e:	bf00      	nop
 8000210:	e000ed04 	.word	0xe000ed04

08000214 <OS_SVC>:


void OS_SVC(int *stackFrame)
{
 8000214:	b480      	push	{r7}
 8000216:	b087      	sub	sp, #28
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	unsigned char svc_number;
	svc_number = *((unsigned char *)((unsigned char *)stackFrame[6] - 2));
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	3318      	adds	r3, #24
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	3b02      	subs	r3, #2
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	75fb      	strb	r3, [r7, #23]
	int a = stackFrame[0];
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	613b      	str	r3, [r7, #16]
	int b = stackFrame[1];
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	60fb      	str	r3, [r7, #12]

	switch(svc_number) {
 8000234:	7dfb      	ldrb	r3, [r7, #23]
 8000236:	2b03      	cmp	r3, #3
 8000238:	d822      	bhi.n	8000280 <OS_SVC+0x6c>
 800023a:	a201      	add	r2, pc, #4	; (adr r2, 8000240 <OS_SVC+0x2c>)
 800023c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000240:	08000251 	.word	0x08000251
 8000244:	0800025d 	.word	0x0800025d
 8000248:	08000269 	.word	0x08000269
 800024c:	08000277 	.word	0x08000277
		case 0:
			stackFrame[0] = a + b;
 8000250:	693a      	ldr	r2, [r7, #16]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	441a      	add	r2, r3
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	601a      	str	r2, [r3, #0]
			break;
 800025a:	e011      	b.n	8000280 <OS_SVC+0x6c>
		case 1:
			stackFrame[0] = a - b;
 800025c:	693a      	ldr	r2, [r7, #16]
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	1ad2      	subs	r2, r2, r3
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
			break;
 8000266:	e00b      	b.n	8000280 <OS_SVC+0x6c>
		case 2:
			stackFrame[0] = a * b;
 8000268:	693b      	ldr	r3, [r7, #16]
 800026a:	68fa      	ldr	r2, [r7, #12]
 800026c:	fb02 f203 	mul.w	r2, r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	601a      	str	r2, [r3, #0]
			break;
 8000274:	e004      	b.n	8000280 <OS_SVC+0x6c>
		case 3:
			*SCB_ICSR = 1 << ICSR_PendSVSET_Msk;
 8000276:	4b05      	ldr	r3, [pc, #20]	; (800028c <OS_SVC+0x78>)
 8000278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800027c:	601a      	str	r2, [r3, #0]
			break;
 800027e:	bf00      	nop
	}

}
 8000280:	bf00      	nop
 8000282:	371c      	adds	r7, #28
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	e000ed04 	.word	0xe000ed04

08000290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000292:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000294:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000298:	480c      	ldr	r0, [pc, #48]	; (80002cc <LoopForever+0x6>)
  ldr r1, =_edata
 800029a:	490d      	ldr	r1, [pc, #52]	; (80002d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800029c:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <LoopForever+0xe>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a0:	e002      	b.n	80002a8 <LoopCopyDataInit>

080002a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a6:	3304      	adds	r3, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ac:	d3f9      	bcc.n	80002a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ae:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b0:	4c0a      	ldr	r4, [pc, #40]	; (80002dc <LoopForever+0x16>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b4:	e001      	b.n	80002ba <LoopFillZerobss>

080002b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b8:	3204      	adds	r2, #4

080002ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002bc:	d3fb      	bcc.n	80002b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002be:	f000 f921 	bl	8000504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c2:	f7ff ff55 	bl	8000170 <main>

080002c6 <LoopForever>:

LoopForever:
    b LoopForever
 80002c6:	e7fe      	b.n	80002c6 <LoopForever>
  ldr   r0, =_estack
 80002c8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d4:	0800056c 	.word	0x0800056c
  ldr r2, =_sbss
 80002d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002dc:	20000058 	.word	0x20000058

080002e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e0:	e7fe      	b.n	80002e0 <ADC1_2_IRQHandler>
	...

080002e4 <EXTI0_IRQHandler>:
	NVIC_IRQ23_EXTI5_9_DISABLE;
	NVIC_IRQ40_EXTI10_15_DISABLE;
}

void EXTI0_IRQHandler(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	//clear IRQ by writing 1 into pending registers EXTI_PR
	EXTI->PR |= (1 << 0);
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <EXTI0_IRQHandler+0x1c>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <EXTI0_IRQHandler+0x1c>)
 80002ee:	f043 0301 	orr.w	r3, r3, #1
 80002f2:	6153      	str	r3, [r2, #20]
	// call the IRQ callback function
	GP_IRQ_Callback_FUNS[0]();
 80002f4:	4b03      	ldr	r3, [pc, #12]	; (8000304 <EXTI0_IRQHandler+0x20>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4798      	blx	r3

}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40010400 	.word	0x40010400
 8000304:	2000001c 	.word	0x2000001c

08000308 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	//clear IRQ by writing 1 into pending registers EXTI_PR
	EXTI->PR |= (1 << 1);
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <EXTI1_IRQHandler+0x1c>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <EXTI1_IRQHandler+0x1c>)
 8000312:	f043 0302 	orr.w	r3, r3, #2
 8000316:	6153      	str	r3, [r2, #20]
	// call the IRQ callback function
	GP_IRQ_Callback_FUNS[1]();
 8000318:	4b03      	ldr	r3, [pc, #12]	; (8000328 <EXTI1_IRQHandler+0x20>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	4798      	blx	r3
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40010400 	.word	0x40010400
 8000328:	2000001c 	.word	0x2000001c

0800032c <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	//clear IRQ by writing 1 into pending registers EXTI_PR
	EXTI->PR |= (1 << 2);
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <EXTI2_IRQHandler+0x1c>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4a04      	ldr	r2, [pc, #16]	; (8000348 <EXTI2_IRQHandler+0x1c>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	6153      	str	r3, [r2, #20]
	// call the IRQ callback function
	GP_IRQ_Callback_FUNS[2]();
 800033c:	4b03      	ldr	r3, [pc, #12]	; (800034c <EXTI2_IRQHandler+0x20>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	4798      	blx	r3
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40010400 	.word	0x40010400
 800034c:	2000001c 	.word	0x2000001c

08000350 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	//clear IRQ by writing 1 into pending registers EXTI_PR
	EXTI->PR |= (1 << 3);
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <EXTI3_IRQHandler+0x1c>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <EXTI3_IRQHandler+0x1c>)
 800035a:	f043 0308 	orr.w	r3, r3, #8
 800035e:	6153      	str	r3, [r2, #20]
	// call the IRQ callback function
	GP_IRQ_Callback_FUNS[3]();
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <EXTI3_IRQHandler+0x20>)
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	4798      	blx	r3
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40010400 	.word	0x40010400
 8000370:	2000001c 	.word	0x2000001c

08000374 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	//clear IRQ by writing 1 into pending registers EXTI_PR
	EXTI->PR |= (1 << 4);
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <EXTI4_IRQHandler+0x1c>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4a04      	ldr	r2, [pc, #16]	; (8000390 <EXTI4_IRQHandler+0x1c>)
 800037e:	f043 0310 	orr.w	r3, r3, #16
 8000382:	6153      	str	r3, [r2, #20]
	// call the IRQ callback function
	GP_IRQ_Callback_FUNS[4]();
 8000384:	4b03      	ldr	r3, [pc, #12]	; (8000394 <EXTI4_IRQHandler+0x20>)
 8000386:	691b      	ldr	r3, [r3, #16]
 8000388:	4798      	blx	r3
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40010400 	.word	0x40010400
 8000394:	2000001c 	.word	0x2000001c

08000398 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 5) 		{EXTI->PR |= 1 << 5;   GP_IRQ_Callback_FUNS[5]();}
 800039c:	4b26      	ldr	r3, [pc, #152]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	f003 0320 	and.w	r3, r3, #32
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d008      	beq.n	80003ba <EXTI9_5_IRQHandler+0x22>
 80003a8:	4b23      	ldr	r3, [pc, #140]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4a22      	ldr	r2, [pc, #136]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 80003ae:	f043 0320 	orr.w	r3, r3, #32
 80003b2:	6153      	str	r3, [r2, #20]
 80003b4:	4b21      	ldr	r3, [pc, #132]	; (800043c <EXTI9_5_IRQHandler+0xa4>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4798      	blx	r3
	if(EXTI->PR & 1 << 6) 		{EXTI->PR |= 1 << 6;   GP_IRQ_Callback_FUNS[6]();}
 80003ba:	4b1f      	ldr	r3, [pc, #124]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d008      	beq.n	80003d8 <EXTI9_5_IRQHandler+0x40>
 80003c6:	4b1c      	ldr	r3, [pc, #112]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a1b      	ldr	r2, [pc, #108]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 80003cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b1a      	ldr	r3, [pc, #104]	; (800043c <EXTI9_5_IRQHandler+0xa4>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4798      	blx	r3
	if(EXTI->PR & 1 << 7) 		{EXTI->PR |= 1 << 7;   GP_IRQ_Callback_FUNS[7]();}
 80003d8:	4b17      	ldr	r3, [pc, #92]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d008      	beq.n	80003f6 <EXTI9_5_IRQHandler+0x5e>
 80003e4:	4b14      	ldr	r3, [pc, #80]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	4a13      	ldr	r2, [pc, #76]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 80003ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ee:	6153      	str	r3, [r2, #20]
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <EXTI9_5_IRQHandler+0xa4>)
 80003f2:	69db      	ldr	r3, [r3, #28]
 80003f4:	4798      	blx	r3
	if(EXTI->PR & 1 << 8) 		{EXTI->PR |= 1 << 8;   GP_IRQ_Callback_FUNS[8]();}
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d008      	beq.n	8000414 <EXTI9_5_IRQHandler+0x7c>
 8000402:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a0c      	ldr	r2, [pc, #48]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 8000408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <EXTI9_5_IRQHandler+0xa4>)
 8000410:	6a1b      	ldr	r3, [r3, #32]
 8000412:	4798      	blx	r3
	if(EXTI->PR & 1 << 9) 		{EXTI->PR |= 1 << 9;   GP_IRQ_Callback_FUNS[9]();}
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800041c:	2b00      	cmp	r3, #0
 800041e:	d008      	beq.n	8000432 <EXTI9_5_IRQHandler+0x9a>
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 8000426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800042a:	6153      	str	r3, [r2, #20]
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <EXTI9_5_IRQHandler+0xa4>)
 800042e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000430:	4798      	blx	r3
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40010400 	.word	0x40010400
 800043c:	2000001c 	.word	0x2000001c

08000440 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 10) 		{EXTI->PR |= 1 << 10;   GP_IRQ_Callback_FUNS[10]();}
 8000444:	4b2d      	ldr	r3, [pc, #180]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800044c:	2b00      	cmp	r3, #0
 800044e:	d008      	beq.n	8000462 <EXTI15_10_IRQHandler+0x22>
 8000450:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	4a29      	ldr	r2, [pc, #164]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 8000456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800045a:	6153      	str	r3, [r2, #20]
 800045c:	4b28      	ldr	r3, [pc, #160]	; (8000500 <EXTI15_10_IRQHandler+0xc0>)
 800045e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000460:	4798      	blx	r3
	if(EXTI->PR & 1 << 11) 		{EXTI->PR |= 1 << 11;   GP_IRQ_Callback_FUNS[11]();}
 8000462:	4b26      	ldr	r3, [pc, #152]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800046a:	2b00      	cmp	r3, #0
 800046c:	d008      	beq.n	8000480 <EXTI15_10_IRQHandler+0x40>
 800046e:	4b23      	ldr	r3, [pc, #140]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a22      	ldr	r2, [pc, #136]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 8000474:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b21      	ldr	r3, [pc, #132]	; (8000500 <EXTI15_10_IRQHandler+0xc0>)
 800047c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800047e:	4798      	blx	r3
	if(EXTI->PR & 1 << 12) 		{EXTI->PR |= 1 << 12;   GP_IRQ_Callback_FUNS[12]();}
 8000480:	4b1e      	ldr	r3, [pc, #120]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000488:	2b00      	cmp	r3, #0
 800048a:	d008      	beq.n	800049e <EXTI15_10_IRQHandler+0x5e>
 800048c:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	4a1a      	ldr	r2, [pc, #104]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 8000492:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000496:	6153      	str	r3, [r2, #20]
 8000498:	4b19      	ldr	r3, [pc, #100]	; (8000500 <EXTI15_10_IRQHandler+0xc0>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049c:	4798      	blx	r3
	if(EXTI->PR & 1 << 13) 		{EXTI->PR |= 1 << 13;   GP_IRQ_Callback_FUNS[13]();}
 800049e:	4b17      	ldr	r3, [pc, #92]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d008      	beq.n	80004bc <EXTI15_10_IRQHandler+0x7c>
 80004aa:	4b14      	ldr	r3, [pc, #80]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a13      	ldr	r2, [pc, #76]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 80004b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <EXTI15_10_IRQHandler+0xc0>)
 80004b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ba:	4798      	blx	r3
	if(EXTI->PR & 1 << 14) 		{EXTI->PR |= 1 << 14;   GP_IRQ_Callback_FUNS[14]();}
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d008      	beq.n	80004da <EXTI15_10_IRQHandler+0x9a>
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 80004ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d2:	6153      	str	r3, [r2, #20]
 80004d4:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <EXTI15_10_IRQHandler+0xc0>)
 80004d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004d8:	4798      	blx	r3
	if(EXTI->PR & 1 << 15) 		{EXTI->PR |= 1 << 15;   GP_IRQ_Callback_FUNS[15]();}
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d008      	beq.n	80004f8 <EXTI15_10_IRQHandler+0xb8>
 80004e6:	4b05      	ldr	r3, [pc, #20]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a04      	ldr	r2, [pc, #16]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 80004ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b03      	ldr	r3, [pc, #12]	; (8000500 <EXTI15_10_IRQHandler+0xc0>)
 80004f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f6:	4798      	blx	r3
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40010400 	.word	0x40010400
 8000500:	2000001c 	.word	0x2000001c

08000504 <__libc_init_array>:
 8000504:	b570      	push	{r4, r5, r6, lr}
 8000506:	2500      	movs	r5, #0
 8000508:	4e0c      	ldr	r6, [pc, #48]	; (800053c <__libc_init_array+0x38>)
 800050a:	4c0d      	ldr	r4, [pc, #52]	; (8000540 <__libc_init_array+0x3c>)
 800050c:	1ba4      	subs	r4, r4, r6
 800050e:	10a4      	asrs	r4, r4, #2
 8000510:	42a5      	cmp	r5, r4
 8000512:	d109      	bne.n	8000528 <__libc_init_array+0x24>
 8000514:	f000 f81a 	bl	800054c <_init>
 8000518:	2500      	movs	r5, #0
 800051a:	4e0a      	ldr	r6, [pc, #40]	; (8000544 <__libc_init_array+0x40>)
 800051c:	4c0a      	ldr	r4, [pc, #40]	; (8000548 <__libc_init_array+0x44>)
 800051e:	1ba4      	subs	r4, r4, r6
 8000520:	10a4      	asrs	r4, r4, #2
 8000522:	42a5      	cmp	r5, r4
 8000524:	d105      	bne.n	8000532 <__libc_init_array+0x2e>
 8000526:	bd70      	pop	{r4, r5, r6, pc}
 8000528:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800052c:	4798      	blx	r3
 800052e:	3501      	adds	r5, #1
 8000530:	e7ee      	b.n	8000510 <__libc_init_array+0xc>
 8000532:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000536:	4798      	blx	r3
 8000538:	3501      	adds	r5, #1
 800053a:	e7f2      	b.n	8000522 <__libc_init_array+0x1e>
 800053c:	08000564 	.word	0x08000564
 8000540:	08000564 	.word	0x08000564
 8000544:	08000564 	.word	0x08000564
 8000548:	08000568 	.word	0x08000568

0800054c <_init>:
 800054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054e:	bf00      	nop
 8000550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000552:	bc08      	pop	{r3}
 8000554:	469e      	mov	lr, r3
 8000556:	4770      	bx	lr

08000558 <_fini>:
 8000558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055a:	bf00      	nop
 800055c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055e:	bc08      	pop	{r3}
 8000560:	469e      	mov	lr, r3
 8000562:	4770      	bx	lr
