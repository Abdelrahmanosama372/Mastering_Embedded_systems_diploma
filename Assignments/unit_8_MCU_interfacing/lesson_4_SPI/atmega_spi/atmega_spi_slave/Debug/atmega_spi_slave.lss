
atmega_spi_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000204  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000204  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800064  00800064  0000029c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009df  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000735  00000000  00000000  00000d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000597  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00001a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ed  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047f  00000000  00000000  00002125  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "MCAL/INC/spi_slave.h"
#include "util/delay.h"

int main(void)
{
	DDRA = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	SPI_SlaveInit();
  96:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPI_SlaveInit>
	//_delay_ms(500);
  
    while (1) 
    {
		//_delay_ms(1000);
		PORTA = SPI_SlaveReceive();
  9a:	0e 94 5e 00 	call	0xbc	; 0xbc <SPI_SlaveReceive>
  9e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f e9       	ldi	r18, 0x9F	; 159
  a2:	86 e8       	ldi	r24, 0x86	; 134
  a4:	91 e0       	ldi	r25, 0x01	; 1
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x14>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x1e>
  b0:	00 00       	nop
  b2:	f3 cf       	rjmp	.-26     	; 0x9a <main+0x8>

000000b4 <SPI_SlaveInit>:

#include "INC/spi_slave.h"

void SPI_SlaveInit(void)
{
	DDR_SPI = (1<<DD_MISO);
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE);
  b8:	8d b9       	out	0x0d, r24	; 13
  ba:	08 95       	ret

000000bc <SPI_SlaveReceive>:
}
char SPI_SlaveReceive(void)
{
	SPDR = 30;
  bc:	8e e1       	ldi	r24, 0x1E	; 30
  be:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
  c0:	77 9b       	sbis	0x0e, 7	; 14
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <SPI_SlaveReceive+0x4>
	return SPDR;
  c4:	8f b1       	in	r24, 0x0f	; 15
  c6:	08 95       	ret

000000c8 <__vector_15>:
		return;
	GP_data_recv = data;
	GP_data_counter = 0;
}

ISR(USART_TXC_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	3f 93       	push	r19
  d6:	4f 93       	push	r20
  d8:	5f 93       	push	r21
  da:	6f 93       	push	r22
  dc:	7f 93       	push	r23
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
	static uint32_t i=1;
	if(i < GP_data_size){
  ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f2:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  f6:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  fa:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <GP_data_size>
  fe:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <GP_data_size+0x1>
 102:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <GP_data_size+0x2>
 106:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <GP_data_size+0x3>
 10a:	84 17       	cp	r24, r20
 10c:	95 07       	cpc	r25, r21
 10e:	a6 07       	cpc	r26, r22
 110:	b7 07       	cpc	r27, r23
 112:	c0 f4       	brcc	.+48     	; 0x144 <__vector_15+0x7c>
		UDR = GP_data_send[i++];
 114:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <GP_data_send>
 118:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <GP_data_send+0x1>
 11c:	ac 01       	movw	r20, r24
 11e:	bd 01       	movw	r22, r26
 120:	4f 5f       	subi	r20, 0xFF	; 255
 122:	5f 4f       	sbci	r21, 0xFF	; 255
 124:	6f 4f       	sbci	r22, 0xFF	; 255
 126:	7f 4f       	sbci	r23, 0xFF	; 255
 128:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__DATA_REGION_ORIGIN__>
 12c:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 130:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 134:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 138:	f9 01       	movw	r30, r18
 13a:	e8 0f       	add	r30, r24
 13c:	f9 1f       	adc	r31, r25
 13e:	80 81       	ld	r24, Z
 140:	8c b9       	out	0x0c, r24	; 12
 142:	0c c0       	rjmp	.+24     	; 0x15c <__vector_15+0x94>
	}else {
		i = 1;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	a0 e0       	ldi	r26, 0x00	; 0
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 150:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 154:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 158:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	}
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <__vector_13>:

ISR(USART_RXC_vect){
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	2f 93       	push	r18
 18a:	3f 93       	push	r19
 18c:	4f 93       	push	r20
 18e:	5f 93       	push	r21
 190:	6f 93       	push	r22
 192:	7f 93       	push	r23
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	af 93       	push	r26
 19a:	bf 93       	push	r27
 19c:	ef 93       	push	r30
 19e:	ff 93       	push	r31
	GP_data_recv[GP_data_counter++] = UDR;
 1a0:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <GP_data_recv>
 1a4:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <GP_data_recv+0x1>
 1a8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 1ac:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 1b0:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__data_end+0x2>
 1b4:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__data_end+0x3>
 1b8:	ac 01       	movw	r20, r24
 1ba:	bd 01       	movw	r22, r26
 1bc:	4f 5f       	subi	r20, 0xFF	; 255
 1be:	5f 4f       	sbci	r21, 0xFF	; 255
 1c0:	6f 4f       	sbci	r22, 0xFF	; 255
 1c2:	7f 4f       	sbci	r23, 0xFF	; 255
 1c4:	40 93 64 00 	sts	0x0064, r20	; 0x800064 <__data_end>
 1c8:	50 93 65 00 	sts	0x0065, r21	; 0x800065 <__data_end+0x1>
 1cc:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <__data_end+0x2>
 1d0:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <__data_end+0x3>
 1d4:	f9 01       	movw	r30, r18
 1d6:	e8 0f       	add	r30, r24
 1d8:	f9 1f       	adc	r31, r25
 1da:	2c b1       	in	r18, 0x0c	; 12
 1dc:	20 83       	st	Z, r18
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
