
timerPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000999  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d4  00000000  00000000  00000bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d7  00000000  00000000  000012a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  0000167c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000460  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000169  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001cbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TIM0_init>:
	//set clock
	TCCR0 |= config->clkSource ;
}

void TIM0_deinit(){
	TCCR0 &= ~(0x7);
  6c:	fc 01       	movw	r30, r24
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	87 bb       	out	0x17, r24	; 23
  72:	80 81       	ld	r24, Z
  74:	88 23       	and	r24, r24
  76:	19 f0       	breq	.+6      	; 0x7e <TIM0_init+0x12>
  78:	81 30       	cpi	r24, 0x01	; 1
  7a:	41 f0       	breq	.+16     	; 0x8c <TIM0_init+0x20>
  7c:	0d c0       	rjmp	.+26     	; 0x98 <TIM0_init+0x2c>
  7e:	83 b7       	in	r24, 0x33	; 51
  80:	80 64       	ori	r24, 0x40	; 64
  82:	83 bf       	out	0x33, r24	; 51
  84:	83 b7       	in	r24, 0x33	; 51
  86:	88 60       	ori	r24, 0x08	; 8
  88:	83 bf       	out	0x33, r24	; 51
  8a:	06 c0       	rjmp	.+12     	; 0x98 <TIM0_init+0x2c>
  8c:	83 b7       	in	r24, 0x33	; 51
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	83 bf       	out	0x33, r24	; 51
  92:	83 b7       	in	r24, 0x33	; 51
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	83 bf       	out	0x33, r24	; 51
  98:	83 b7       	in	r24, 0x33	; 51
  9a:	80 63       	ori	r24, 0x30	; 48
  9c:	83 bf       	out	0x33, r24	; 51
  9e:	83 81       	ldd	r24, Z+3	; 0x03
  a0:	8c bf       	out	0x3c, r24	; 60
  a2:	93 b7       	in	r25, 0x33	; 51
  a4:	81 81       	ldd	r24, Z+1	; 0x01
  a6:	89 2b       	or	r24, r25
  a8:	83 bf       	out	0x33, r24	; 51
  aa:	08 95       	ret

000000ac <set_OC_value>:
}

void set_OC_value(uint8_t OC_val){
	OCR0 = OC_val;
  ac:	8c bf       	out	0x3c, r24	; 60
  ae:	08 95       	ret

000000b0 <main>:
#include <avr/io.h>
#include "MCAL/inc/PWM.h"
#include <util/delay.h>

int main(void)
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	00 d0       	rcall	.+0      	; 0xb6 <main+0x6>
  b6:	00 d0       	rcall	.+0      	; 0xb8 <main+0x8>
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
	TIM0_Config config;
	config.clkSource = PRESCALAR_64;
  bc:	83 e0       	ldi	r24, 0x03	; 3
  be:	8a 83       	std	Y+2, r24	; 0x02
	config.TPWM_Mode = TIM0_FAST_PWM;
  c0:	19 82       	std	Y+1, r1	; 0x01
	config.PWMmode = INVERTING;
  c2:	8b 83       	std	Y+3, r24	; 0x03
	config.OC_val = 0;
  c4:	1c 82       	std	Y+4, r1	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f e3       	ldi	r18, 0x3F	; 63
  c8:	8d e0       	ldi	r24, 0x0D	; 13
  ca:	93 e0       	ldi	r25, 0x03	; 3
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x1c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x26>
  d6:	00 00       	nop
	_delay_ms(1000);
	TIM0_init(&config);
  d8:	ce 01       	movw	r24, r28
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	0e 94 36 00 	call	0x6c	; 0x6c <TIM0_init>
    /* Replace with your application code */
    while (1) 
    {	
		for (int i=255; i>=0; i--){
  e0:	0f ef       	ldi	r16, 0xFF	; 255
  e2:	10 e0       	ldi	r17, 0x00	; 0
  e4:	0b c0       	rjmp	.+22     	; 0xfc <main+0x4c>
			set_OC_value(i);
  e6:	80 2f       	mov	r24, r16
  e8:	0e 94 56 00 	call	0xac	; 0xac <set_OC_value>
  ec:	83 ec       	ldi	r24, 0xC3	; 195
  ee:	99 e0       	ldi	r25, 0x09	; 9
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x40>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x46>
  f6:	00 00       	nop
	_delay_ms(1000);
	TIM0_init(&config);
    /* Replace with your application code */
    while (1) 
    {	
		for (int i=255; i>=0; i--){
  f8:	01 50       	subi	r16, 0x01	; 1
  fa:	11 09       	sbc	r17, r1
  fc:	11 23       	and	r17, r17
  fe:	9c f7       	brge	.-26     	; 0xe6 <main+0x36>
 100:	0f ef       	ldi	r16, 0xFF	; 255
 102:	10 e0       	ldi	r17, 0x00	; 0
 104:	0b c0       	rjmp	.+22     	; 0x11c <main+0x6c>
			set_OC_value(i);
			_delay_ms(10);
		}
		
		for (int i=255; i>=0; i--){
			set_OC_value(i);
 106:	80 2f       	mov	r24, r16
 108:	0e 94 56 00 	call	0xac	; 0xac <set_OC_value>
 10c:	83 ec       	ldi	r24, 0xC3	; 195
 10e:	99 e0       	ldi	r25, 0x09	; 9
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x60>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x66>
 116:	00 00       	nop
		for (int i=255; i>=0; i--){
			set_OC_value(i);
			_delay_ms(10);
		}
		
		for (int i=255; i>=0; i--){
 118:	01 50       	subi	r16, 0x01	; 1
 11a:	11 09       	sbc	r17, r1
 11c:	11 23       	and	r17, r17
 11e:	9c f7       	brge	.-26     	; 0x106 <main+0x56>
 120:	df cf       	rjmp	.-66     	; 0xe0 <main+0x30>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
