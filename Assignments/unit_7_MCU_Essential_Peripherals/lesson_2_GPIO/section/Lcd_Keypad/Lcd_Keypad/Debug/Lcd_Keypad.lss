
Lcd_Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000254  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000254  000002e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800078  00800078  00000300  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c42  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007dc  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068e  00000000  00000000  00001842  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00001ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046a  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000044b  00000000  00000000  000024ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000028f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
  8a:	0c 94 28 01 	jmp	0x250	; 0x250 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Keypad_init>:
					{'4', '5', '6', '*'},
					{'1', '2', '3', '-'},
					{'r', '0', '=', '+'}};

void Keypad_init(){
	KEYPAD_DDR  &= ~((1<<R0) | (1<<R1) | (1<<R2) | (1<<R3));
  92:	84 b3       	in	r24, 0x14	; 20
  94:	80 7f       	andi	r24, 0xF0	; 240
  96:	84 bb       	out	0x14, r24	; 20
	KEYPAD_DDR  |= (1<<C0) | (1<<C1) | (1<<C2) | (1<<C3);
  98:	84 b3       	in	r24, 0x14	; 20
  9a:	80 6f       	ori	r24, 0xF0	; 240
  9c:	84 bb       	out	0x14, r24	; 20
	KEYPAD_PORT = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	85 bb       	out	0x15, r24	; 21
  a2:	08 95       	ret

000000a4 <Keypad_getkey>:
}

char Keypad_getkey(){
	int i,j;
	for(i=0; i<4; i++){
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	3e c0       	rjmp	.+124    	; 0x126 <Keypad_getkey+0x82>
		KEYPAD_PORT = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	85 bb       	out	0x15, r24	; 21
		KEYPAD_PORT &= ~(1<<COLS[i]);
  ae:	25 b3       	in	r18, 0x15	; 21
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	fb 01       	movw	r30, r22
  b6:	e0 59       	subi	r30, 0x90	; 144
  b8:	ff 4f       	sbci	r31, 0xFF	; 255
  ba:	00 80       	ld	r0, Z
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <Keypad_getkey+0x1e>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <Keypad_getkey+0x1a>
  c6:	80 95       	com	r24
  c8:	82 23       	and	r24, r18
  ca:	85 bb       	out	0x15, r24	; 21
		for(j=0; j<4; j++){
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	25 c0       	rjmp	.+74     	; 0x11c <Keypad_getkey+0x78>
			if(!(KEYPAD_PIN & (1 << ROWS[j]))){
  d2:	83 b3       	in	r24, 0x13	; 19
  d4:	f9 01       	movw	r30, r18
  d6:	ec 58       	subi	r30, 0x8C	; 140
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	40 81       	ld	r20, Z
  dc:	e4 2f       	mov	r30, r20
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <Keypad_getkey+0x42>
  e2:	95 95       	asr	r25
  e4:	87 95       	ror	r24
  e6:	4a 95       	dec	r20
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <Keypad_getkey+0x3e>
  ea:	80 fd       	sbrc	r24, 0
  ec:	15 c0       	rjmp	.+42     	; 0x118 <Keypad_getkey+0x74>
				while(!(KEYPAD_PIN & (1 << ROWS[j])));
  ee:	83 b3       	in	r24, 0x13	; 19
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 2e       	mov	r0, r30
  f4:	02 c0       	rjmp	.+4      	; 0xfa <Keypad_getkey+0x56>
  f6:	95 95       	asr	r25
  f8:	87 95       	ror	r24
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <Keypad_getkey+0x52>
  fe:	80 ff       	sbrs	r24, 0
 100:	f6 cf       	rjmp	.-20     	; 0xee <Keypad_getkey+0x4a>
				return Keys[i][j];
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
 106:	66 0f       	add	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	60 5a       	subi	r22, 0xA0	; 160
 10c:	7f 4f       	sbci	r23, 0xFF	; 255
 10e:	fb 01       	movw	r30, r22
 110:	e2 0f       	add	r30, r18
 112:	f3 1f       	adc	r31, r19
 114:	80 81       	ld	r24, Z
 116:	08 95       	ret
char Keypad_getkey(){
	int i,j;
	for(i=0; i<4; i++){
		KEYPAD_PORT = 0xFF;
		KEYPAD_PORT &= ~(1<<COLS[i]);
		for(j=0; j<4; j++){
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	3f 4f       	sbci	r19, 0xFF	; 255
 11c:	24 30       	cpi	r18, 0x04	; 4
 11e:	31 05       	cpc	r19, r1
 120:	c4 f2       	brlt	.-80     	; 0xd2 <Keypad_getkey+0x2e>
	KEYPAD_PORT = 0xFF;
}

char Keypad_getkey(){
	int i,j;
	for(i=0; i<4; i++){
 122:	6f 5f       	subi	r22, 0xFF	; 255
 124:	7f 4f       	sbci	r23, 0xFF	; 255
 126:	64 30       	cpi	r22, 0x04	; 4
 128:	71 05       	cpc	r23, r1
 12a:	0c f4       	brge	.+2      	; 0x12e <Keypad_getkey+0x8a>
 12c:	be cf       	rjmp	.-132    	; 0xaa <Keypad_getkey+0x6>
				while(!(KEYPAD_PIN & (1 << ROWS[j])));
				return Keys[i][j];
			}
		}
	}
	return '!';
 12e:	81 e2       	ldi	r24, 0x21	; 33
}
 130:	08 95       	ret

00000132 <LCD_lcd_kick>:
		LCD_writeInteger(-tmp_num) : LCD_writeInteger(tmp_num);
}

void LCD_clearDisplay(){
	//LCD_check_lcd_isbusy();
	LCD_WRITE_COMMAND(LCD_RETURN_HOME);
 132:	88 b3       	in	r24, 0x18	; 24
 134:	84 60       	ori	r24, 0x04	; 4
 136:	88 bb       	out	0x18, r24	; 24
 138:	2f e7       	ldi	r18, 0x7F	; 127
 13a:	88 e3       	ldi	r24, 0x38	; 56
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <LCD_lcd_kick+0xc>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_lcd_kick+0x16>
 148:	00 00       	nop
 14a:	88 b3       	in	r24, 0x18	; 24
 14c:	8b 7f       	andi	r24, 0xFB	; 251
 14e:	88 bb       	out	0x18, r24	; 24
 150:	08 95       	ret

00000152 <LCD_WRITE_COMMAND>:
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
 156:	8b b3       	in	r24, 0x1b	; 27
 158:	80 7f       	andi	r24, 0xF0	; 240
 15a:	9c 2f       	mov	r25, r28
 15c:	92 95       	swap	r25
 15e:	9f 70       	andi	r25, 0x0F	; 15
 160:	89 2b       	or	r24, r25
 162:	8b bb       	out	0x1b, r24	; 27
 164:	88 b3       	in	r24, 0x18	; 24
 166:	8c 7f       	andi	r24, 0xFC	; 252
 168:	88 bb       	out	0x18, r24	; 24
 16a:	0e 94 99 00 	call	0x132	; 0x132 <LCD_lcd_kick>
 16e:	8b b3       	in	r24, 0x1b	; 27
 170:	80 7f       	andi	r24, 0xF0	; 240
 172:	cf 70       	andi	r28, 0x0F	; 15
 174:	c8 2b       	or	r28, r24
 176:	cb bb       	out	0x1b, r28	; 27
 178:	88 b3       	in	r24, 0x18	; 24
 17a:	8c 7f       	andi	r24, 0xFC	; 252
 17c:	88 bb       	out	0x18, r24	; 24
 17e:	0e 94 99 00 	call	0x132	; 0x132 <LCD_lcd_kick>
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <LCD_init>:
 186:	8f e3       	ldi	r24, 0x3F	; 63
 188:	9c e9       	ldi	r25, 0x9C	; 156
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_init+0x4>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_init+0xa>
 190:	00 00       	nop
 192:	87 b3       	in	r24, 0x17	; 23
 194:	87 60       	ori	r24, 0x07	; 7
 196:	87 bb       	out	0x17, r24	; 23
 198:	88 b3       	in	r24, 0x18	; 24
 19a:	88 7f       	andi	r24, 0xF8	; 248
 19c:	88 bb       	out	0x18, r24	; 24
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	8a bb       	out	0x1a, r24	; 26
 1a2:	8f e2       	ldi	r24, 0x2F	; 47
 1a4:	95 e7       	ldi	r25, 0x75	; 117
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_init+0x20>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_init+0x26>
 1ac:	00 00       	nop
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_WRITE_COMMAND>
 1b6:	88 e2       	ldi	r24, 0x28	; 40
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_WRITE_COMMAND>
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_WRITE_COMMAND>
 1c6:	80 e8       	ldi	r24, 0x80	; 128
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_WRITE_COMMAND>
 1ce:	8f e0       	ldi	r24, 0x0F	; 15
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_WRITE_COMMAND>
 1d6:	08 95       	ret

000001d8 <LCD_goTo_X_and_Y>:
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_ENTRY_INC);
}

void LCD_goTo_X_and_Y(unsigned char x, unsigned char y){
	if(x == 0){
 1d8:	81 11       	cpse	r24, r1
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <LCD_goTo_X_and_Y+0xe>
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + y);
 1dc:	80 e8       	ldi	r24, 0x80	; 128
 1de:	86 0f       	add	r24, r22
 1e0:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_WRITE_COMMAND>
 1e4:	08 95       	ret
	}else{
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + y);
 1e6:	80 ec       	ldi	r24, 0xC0	; 192
 1e8:	86 0f       	add	r24, r22
 1ea:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_WRITE_COMMAND>
 1ee:	08 95       	ret

000001f0 <LCD_writeChar>:
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
	LCD_CTRL_PORT &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	LCD_lcd_kick();
}

void LCD_writeChar(char ch){
 1f0:	cf 93       	push	r28
 1f2:	c8 2f       	mov	r28, r24
	if(number_of_characters == 16) {
 1f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 1f8:	80 31       	cpi	r24, 0x10	; 16
 1fa:	21 f4       	brne	.+8      	; 0x204 <LCD_writeChar+0x14>
		LCD_goTo_X_and_Y(1,0);
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_goTo_X_and_Y>
	}
	number_of_characters++;
 204:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (ch >> 4);
 20e:	8b b3       	in	r24, 0x1b	; 27
 210:	80 7f       	andi	r24, 0xF0	; 240
 212:	9c 2f       	mov	r25, r28
 214:	92 95       	swap	r25
 216:	9f 70       	andi	r25, 0x0F	; 15
 218:	89 2b       	or	r24, r25
 21a:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL_PORT = (LCD_CTRL_PORT & 0xF8) | (1 << RS_SWITCH);
 21c:	88 b3       	in	r24, 0x18	; 24
 21e:	88 7f       	andi	r24, 0xF8	; 248
 220:	81 60       	ori	r24, 0x01	; 1
 222:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
 224:	0e 94 99 00 	call	0x132	; 0x132 <LCD_lcd_kick>
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (ch & 0x0F);
 228:	8b b3       	in	r24, 0x1b	; 27
 22a:	80 7f       	andi	r24, 0xF0	; 240
 22c:	cf 70       	andi	r28, 0x0F	; 15
 22e:	c8 2b       	or	r28, r24
 230:	cb bb       	out	0x1b, r28	; 27
	LCD_lcd_kick();
 232:	0e 94 99 00 	call	0x132	; 0x132 <LCD_lcd_kick>
}
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <main>:
#include "Lcd/lcd.h"
#include "keyPad/keyPad.h"

int main(void)
{
	Keypad_init();
 23a:	0e 94 49 00 	call	0x92	; 0x92 <Keypad_init>
	LCD_init();
 23e:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_init>
	
	//LCD_writeString("ABDEL RAHMAN");
    /* Replace with your application code */
    while (1) 
    {
		char ch = Keypad_getkey();
 242:	0e 94 52 00 	call	0xa4	; 0xa4 <Keypad_getkey>
		if(ch != '!')
 246:	81 32       	cpi	r24, 0x21	; 33
 248:	e1 f3       	breq	.-8      	; 0x242 <main+0x8>
			LCD_writeChar(ch);
 24a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_writeChar>
 24e:	f9 cf       	rjmp	.-14     	; 0x242 <main+0x8>

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
