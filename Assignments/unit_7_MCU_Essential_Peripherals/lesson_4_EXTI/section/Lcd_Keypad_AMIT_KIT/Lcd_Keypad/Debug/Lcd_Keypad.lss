
Lcd_Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000248  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000248  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080007c  0080007c  000002f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b90  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a2  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005cd  00000000  00000000  00001726  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000444  00000000  00000000  00001e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000428  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0c 01 	call	0x218	; 0x218 <main>
  8a:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_lcd_kick>:
	LCD_writeInteger(tmp_num);
	LCD_writeChar('.');
	tmp_num = ((int)(number*100)) % 100;
	tmp_num < 0 ?
		LCD_writeInteger(-tmp_num) : LCD_writeInteger(tmp_num);
}
  92:	88 b3       	in	r24, 0x18	; 24
  94:	88 60       	ori	r24, 0x08	; 8
  96:	88 bb       	out	0x18, r24	; 24
  98:	2f e7       	ldi	r18, 0x7F	; 127
  9a:	88 e3       	ldi	r24, 0x38	; 56
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <LCD_lcd_kick+0xc>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_lcd_kick+0x16>
  a8:	00 00       	nop
  aa:	88 b3       	in	r24, 0x18	; 24
  ac:	87 7f       	andi	r24, 0xF7	; 247
  ae:	88 bb       	out	0x18, r24	; 24
  b0:	08 95       	ret

000000b2 <LCD_WRITE_COMMAND>:
  b2:	cf 93       	push	r28
  b4:	c8 2f       	mov	r28, r24
  b6:	8b b3       	in	r24, 0x1b	; 27
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	9c 2f       	mov	r25, r28
  bc:	90 7f       	andi	r25, 0xF0	; 240
  be:	89 2b       	or	r24, r25
  c0:	8b bb       	out	0x1b, r24	; 27
  c2:	88 b3       	in	r24, 0x18	; 24
  c4:	89 7f       	andi	r24, 0xF9	; 249
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
  cc:	2b b3       	in	r18, 0x1b	; 27
  ce:	30 e1       	ldi	r19, 0x10	; 16
  d0:	c3 9f       	mul	r28, r19
  d2:	c0 01       	movw	r24, r0
  d4:	11 24       	eor	r1, r1
  d6:	92 2f       	mov	r25, r18
  d8:	9f 70       	andi	r25, 0x0F	; 15
  da:	89 2b       	or	r24, r25
  dc:	8b bb       	out	0x1b, r24	; 27
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	89 7f       	andi	r24, 0xF9	; 249
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <LCD_init>:
  ec:	8f e3       	ldi	r24, 0x3F	; 63
  ee:	9c e9       	ldi	r25, 0x9C	; 156
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCD_init+0x4>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_init+0xa>
  f6:	00 00       	nop
  f8:	87 b3       	in	r24, 0x17	; 23
  fa:	8e 60       	ori	r24, 0x0E	; 14
  fc:	87 bb       	out	0x17, r24	; 23
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	81 7f       	andi	r24, 0xF1	; 241
 102:	88 bb       	out	0x18, r24	; 24
 104:	80 ef       	ldi	r24, 0xF0	; 240
 106:	8a bb       	out	0x1a, r24	; 26
 108:	8f e2       	ldi	r24, 0x2F	; 47
 10a:	95 e7       	ldi	r25, 0x75	; 117
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_init+0x20>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_init+0x26>
 112:	00 00       	nop
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WRITE_COMMAND>
 11c:	88 e2       	ldi	r24, 0x28	; 40
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WRITE_COMMAND>
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WRITE_COMMAND>
 12c:	80 e8       	ldi	r24, 0x80	; 128
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WRITE_COMMAND>
 134:	8f e0       	ldi	r24, 0x0F	; 15
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WRITE_COMMAND>
 13c:	08 95       	ret

0000013e <LCD_goTo_X_and_Y>:
 13e:	81 11       	cpse	r24, r1
 140:	05 c0       	rjmp	.+10     	; 0x14c <LCD_goTo_X_and_Y+0xe>
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	86 0f       	add	r24, r22
 146:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WRITE_COMMAND>
 14a:	08 95       	ret
 14c:	80 ec       	ldi	r24, 0xC0	; 192
 14e:	86 0f       	add	r24, r22
 150:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WRITE_COMMAND>
 154:	08 95       	ret

00000156 <LCD_writeChar>:
 156:	cf 93       	push	r28
 158:	c8 2f       	mov	r28, r24
 15a:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <number_of_characters>
 15e:	80 31       	cpi	r24, 0x10	; 16
 160:	21 f4       	brne	.+8      	; 0x16a <LCD_writeChar+0x14>
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_goTo_X_and_Y>
 16a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 16e:	81 11       	cpse	r24, r1
 170:	05 c0       	rjmp	.+10     	; 0x17c <LCD_writeChar+0x26>
 172:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <number_of_characters>
 176:	8f 5f       	subi	r24, 0xFF	; 255
 178:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <number_of_characters>
 17c:	8b b3       	in	r24, 0x1b	; 27
 17e:	8f 70       	andi	r24, 0x0F	; 15
 180:	9c 2f       	mov	r25, r28
 182:	90 7f       	andi	r25, 0xF0	; 240
 184:	89 2b       	or	r24, r25
 186:	8b bb       	out	0x1b, r24	; 27
 188:	88 b3       	in	r24, 0x18	; 24
 18a:	88 7f       	andi	r24, 0xF8	; 248
 18c:	82 60       	ori	r24, 0x02	; 2
 18e:	88 bb       	out	0x18, r24	; 24
 190:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
 194:	2b b3       	in	r18, 0x1b	; 27
 196:	30 e1       	ldi	r19, 0x10	; 16
 198:	c3 9f       	mul	r28, r19
 19a:	c0 01       	movw	r24, r0
 19c:	11 24       	eor	r1, r1
 19e:	92 2f       	mov	r25, r18
 1a0:	9f 70       	andi	r25, 0x0F	; 15
 1a2:	89 2b       	or	r24, r25
 1a4:	8b bb       	out	0x1b, r24	; 27
 1a6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <LCD_writeString>:
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <LCD_writeString+0xe>
 1b6:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_writeChar>
 1ba:	21 96       	adiw	r28, 0x01	; 1
 1bc:	88 81       	ld	r24, Y
 1be:	81 11       	cpse	r24, r1
 1c0:	fa cf       	rjmp	.-12     	; 0x1b6 <LCD_writeString+0x8>
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <LCD_backClearDisplay>:
	//LCD_check_lcd_isbusy();
	LCD_WRITE_COMMAND(LCD_CLEAR_DISPLAY);
	number_of_characters = 0;
}

void LCD_backClearDisplay(){
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
	LCD_WRITE_COMMAND(LCD_ENTRY_DEC);
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WRITE_COMMAND>
	is_clearing = 1;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
	int i;
	for(i=number_of_characters+1; i>0; i--){
 1d8:	c0 91 7d 00 	lds	r28, 0x007D	; 0x80007d <number_of_characters>
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
 1de:	21 96       	adiw	r28, 0x01	; 1
 1e0:	0b c0       	rjmp	.+22     	; 0x1f8 <LCD_backClearDisplay+0x30>
		if(i==16)
 1e2:	c0 31       	cpi	r28, 0x10	; 16
 1e4:	d1 05       	cpc	r29, r1
 1e6:	21 f4       	brne	.+8      	; 0x1f0 <LCD_backClearDisplay+0x28>
			LCD_goTo_X_and_Y(0,15);
 1e8:	6f e0       	ldi	r22, 0x0F	; 15
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_goTo_X_and_Y>
		LCD_writeChar(' ');
 1f0:	80 e2       	ldi	r24, 0x20	; 32
 1f2:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_writeChar>

void LCD_backClearDisplay(){
	LCD_WRITE_COMMAND(LCD_ENTRY_DEC);
	is_clearing = 1;
	int i;
	for(i=number_of_characters+1; i>0; i--){
 1f6:	21 97       	sbiw	r28, 0x01	; 1
 1f8:	1c 16       	cp	r1, r28
 1fa:	1d 06       	cpc	r1, r29
 1fc:	94 f3       	brlt	.-28     	; 0x1e2 <LCD_backClearDisplay+0x1a>
		if(i==16)
			LCD_goTo_X_and_Y(0,15);
		LCD_writeChar(' ');
	}
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 1fe:	80 e8       	ldi	r24, 0x80	; 128
 200:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_INC);
 204:	86 e0       	ldi	r24, 0x06	; 6
 206:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WRITE_COMMAND>
	is_clearing = 0;
 20a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
	number_of_characters = 0;
 20e:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <number_of_characters>
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <main>:
#include "Lcd/lcd.h"
#include "keyPad/keyPad.h"

int main(void)
{
	LCD_init();
 218:	0e 94 76 00 	call	0xec	; 0xec <LCD_init>
	LCD_writeString("LEARN IN DEPTH");
 21c:	80 e6       	ldi	r24, 0x60	; 96
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_writeString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	89 e6       	ldi	r24, 0x69	; 105
 228:	98 e1       	ldi	r25, 0x18	; 24
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x12>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x1c>
 234:	00 00       	nop
	_delay_ms(1000);
	LCD_backClearDisplay();
 236:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_backClearDisplay>
	LCD_writeString("ABDEL RAHMAN");
 23a:	8f e6       	ldi	r24, 0x6F	; 111
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_writeString>
 242:	ff cf       	rjmp	.-2      	; 0x242 <main+0x2a>

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
